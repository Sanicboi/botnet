import { AppDataSource } from "../data-source";
import { User } from "../entity/User";
import { Btn } from "../neuro/utils";
import { SupportedModels } from "../utils/Models";
import { Bot } from "./Bot";

const manager = AppDataSource.manager;

export class SettingsController {
  constructor(private bot: Bot) {
    this.bot.onSettings(this.settings.bind(this));
    this.bot.onSetting(this.setting.bind(this));
    this.bot.onModel(this.model.bind(this));
    this.bot.onCount(this.count.bind(this));
  }

  private async settings(user: User) {
    await this.bot.bot.sendMessage(+user.chatId, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", {
      reply_markup: {
        inline_keyboard: [
          Btn("–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", "settings-model"),
          Btn("–ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤", "settings-count"),
        ],
      },
    });
  }

  private async setting(user: User, setting: string) {
    if (setting === "model") {
      await this.bot.bot.sendMessage(
        +user.chatId,
        "[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–æ–¥–µ–ª—è—Ö](https://docs.google.com/document/d/1VkachN7pXjuVQ5ybHeZLoNLZ2hcXLAALbwIsDmXjtoc/edit)",
        {
          reply_markup: {
            inline_keyboard: [
              Btn("GPT 4 Omni mini", "model-gpt-4o-mini"),
              Btn("GPT 4 Omni", "model-gpt-4o"),
              Btn("GPT 4 Turbo", "model-gpt-4-turbo"),
              Btn("–ù–∞–∑–∞–¥", "settings"),
            ],
          },
        },
      );
    } else if (setting === "count") {
      await this.bot.bot.sendMessage(
        +user.chatId,
        `üìä –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é. –í –ø–æ–¥—Å—á—ë—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è (–ø–∞–º—è—Ç—å).\n–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n\n‚úÖ –í–∫–ª—é—á–∏—Ç—å - –í—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.\n\n‚úñÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å - –í—ã –Ω–µ –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –±–æ–ª–µ–µ —á–∏—Å—Ç—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è –Ω–∞ –ø–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ –≤—Ä–µ–º—è –æ–±—â–µ–Ω–∏—è.`,
        {
          reply_markup: {
            inline_keyboard: [
              Btn(
                user.countTokens ? "‚úñÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å" : "‚úÖ –í–∫–ª—é—á–∏—Ç—å",
                "toggle-count",
              ),
              Btn("–ù–∞–∑–∞–¥", "settings"),
            ],
          },
        },
      );
    }
  }

  private async model(user: User, model: string) {
    user.model = model as SupportedModels;
    await manager.save(user);
    await this.bot.bot.sendMessage(+user.chatId, "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", {
      reply_markup: {
        inline_keyboard: user.agentId ? [] : [Btn("–ù–∞–∑–∞–¥", "settings")],
      },
    });
  }

  private async count(user: User) {
    user.countTokens = !user.countTokens;
    await manager.save(user);
    await this.bot.bot.sendMessage(
      +user.chatId,
      `–ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ ${user.countTokens ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}`,
      {
        reply_markup: {
          inline_keyboard: [
            Btn(
              user.countTokens ? "‚úñÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å" : "‚úÖ –í–∫–ª—é—á–∏—Ç—å",
              "toggle-count",
            ),
            Btn("–ù–∞–∑–∞–¥", "settings"),
          ],
        },
      },
    );
  }
}
