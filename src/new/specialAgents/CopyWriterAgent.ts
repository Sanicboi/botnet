import { AppDataSource } from "../../data-source";
import { AgentModel } from "../../entity/AgentModel";
import { User } from "../../entity/User";
import { Btn } from "../../neuro/utils";
import { Bot } from "../Bot";
import { DialogController } from "../DialogController";

const manager = AppDataSource.manager;

export class CopyWriterAgent {
  constructor(
    private bot: Bot,
    private dialogController: DialogController,
  ) {
    this.bot.onCopyWriterStyles(this.styles.bind(this));
    this.bot.onCopyWriterStyle(this.style.bind(this));
    this.bot.onCopyWriterTone(this.tone.bind(this));
  }

  private async styles(user: User) {
    user.agentId = 1;
    user.agent!.id = 1;
    await manager.save(user);
    const agent = await manager.findOneBy(AgentModel, {
      id: user.agentId!,
    });
    if (!agent) throw new Error("Agent not found");
    await this.bot.bot.sendMessage(+user.chatId, agent.firstMessage, {
      reply_markup: {
        inline_keyboard: [
          Btn(`–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π`, `textstyle-official`),
          Btn(`–ù–∞—É—á–Ω—ã–π`, `textstyle-scientific`),
          Btn(`–ü—É–±–ª–∏—Ü–∏—Å—Ç–∏—á–µ—Å–∫–∏–π`, `textstyle-public`),
          Btn(`–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π`, `textstyle-fiction`),
          Btn(`–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π`, `textstyle-informal`),
          Btn(`–†–µ–∫–ª–∞–º–Ω—ã–π`, `textstyle-ad`),
        ],
      },
    });
  }

  private async style(user: User, style: string) {
    user.dialogueData += `–°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞: ${style}\n`;
    await manager.save(user);
    await this.bot.bot.sendMessage(
      +user.chatId,
      `${user.dialogueData}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω —Ç–µ–∫—Å—Ç–∞.`,
      {
        reply_markup: {
          inline_keyboard: [
            Btn(`–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π`, `texttone-–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π`),
            Btn(`–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π`, `texttone-–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π`),
            Btn(`–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π`, `texttone-–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π`),
            Btn(`–ò—Ä–æ–Ω–∏—á–Ω—ã–π`, `texttone-–ò—Ä–æ–Ω–∏—á–Ω—ã–π`),
            Btn(`–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π`, `texttone-–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π`),
            Btn(`–í–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–π`, `texttone-–í–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–π`),
            Btn(`–î–µ—Ä–∑–∫–∏–π`, `texttone-–î–µ—Ä–∑–∫–∏–π`),
            Btn(`–°–ø–æ–∫–æ–π–Ω—ã–π / —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π`, `texttone-–°–ø–æ–∫–æ–π–Ω—ã–π`),
          ],
        },
      },
    );
  }

  private async tone(user: User, tone: string) {
    user.dialogueData += `–¢–æ–Ω —Ç–µ–∫—Å—Ç–∞: ${tone}\n`;
    await manager.save(user);
    await this.dialogController.createDialog(
      user,
      1,
      `${user.dialogueData}\n–û—Ç–ª–∏—á–Ω–æ, —Å–æ —Å—Ç–∏–ª–µ–º –∏ —Ç–æ–Ω–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å! üòâ\n\n–¢–µ–ø–µ—Ä—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ç–µ–±—è –≤–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n1)–¢–µ–º–∞\n2)–î–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç  (—Å—Ç—É–¥–µ–Ω—Ç—ã, –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã‚Ä¶)\n3)–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω; 10 –º–∏–Ω; 30 –º–∏–Ω)\n\n–û—Ç–≤–µ—Ç –ø—Ä–∏—à–ª–∏ –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!\n–û–∂–∏–¥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)üòâ`,
    ); // TODO: set agent id
  }
}
