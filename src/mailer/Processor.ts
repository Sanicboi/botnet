import { Job, Queue, Worker } from "bullmq";
import { Bot } from "../entity/Bot";
import { User } from "../entity/User";
import { TelegramClient } from "telegram";
import OpenAI from "openai";
import { DataSource, Repository } from "typeorm";
import { UnknownError } from "../utils/Errors";
import TelegramBot from "node-telegram-bot-api";
import { Sender } from "./Sender";
import { AppDataSource } from "../data-source";
import { CascadeUser } from "../entity/CascadeUser";
import { Randomiser } from "./Randomiser";

interface IProcessingTask {
  bot: Bot;
  user: User;
}

const startMessage =
  "–ü—Ä–∏–≤–µ—Ç) \n–í—Ä–µ–º–µ–Ω–∏ –º–∞–ª–æ, –ø–æ—ç—Ç–æ–º—É –¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—Ç–∏.\n–Ø –ì—Ä–∏–≥–æ—Ä–∏–π, –∫–æ–º–ø–∞–Ω–∏—è SmartComrade.\n\n–°–º–æ—Ç—Ä–∏, —è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–ø–∞—Ä–∏–≤–∞—é.\n–ó–Ω–∞—é, —á—Ç–æ —Ç—ã —Å–∏–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –ø–æ—ç—Ç–æ–º—É –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ü–µ–ø—Ç, –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.\n\n–ï—Å—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è - –ò–ò –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ú—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç—É –∏—Å—Ç–æ—Ä–∏—è –ø–æ —Å–µ–±–µ –∑–Ω–∞—è –∫–∞–∫ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Å–∏–ª –∏ –¥–µ–Ω–µ–≥ —É—Ö–æ–¥–∏—Ç –Ω–∞ –∑–∞–ø—É—Å–∫–∏, –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é.\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–µ–π—Å—ã –¥–∞–ª–∏ —Ç–∞–∫—É—é –≤–∫—É—Å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:\n‚Äî –°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç—É 1500 –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ 4 –Ω–µ–¥–µ–ª–∏,–ø–æ —Ü–µ–Ω–µ 5 —Ä—É–±/–ª–∏–¥. –¢–æ –µ—Å—Ç—å –¥–æ 200 –ª–∏–¥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –ë–µ–∑ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.\n‚Äî –ù–µ–π—Ä–æ-SMM –º–µ–Ω–µ–¥–∂–µ—Ä SmartComrade –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –±–æ–ª–µ–µ 100 —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ –∫–∞–Ω–∞–ª—ã –∑–∞–∫–∞–∑—á–∏–∫–æ–≤, —Å —Ü–µ–Ω–æ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –æ—Ç 1 –¥–æ 3 —Ä—É–±.\n–ï—Å–ª–∏ —É–ø—Ä–æ—â–∞—Ç—å, —Ç–æ –ò–ò —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç–∫–æ–Ω–æ–º–∏—Ç—å: –≤—Ä–µ–º—è, –¥–µ–Ω—å–≥–∏, —Å–∏–ª—ã –∏ –Ω–µ—Ä–≤—ã!\n–≤ –Ω–∞—à–µ –≤—Ä–µ–º—è —Ä–µ—Å—É—Ä—Å—ã –∫—Ä–∞–π–Ω–µ —Ü–µ–Ω–Ω—ã–µüëÄ\n\n–û–±–µ—â–∞–ª –∫—Ä–∞—Ç–∫–æ, –ø–æ—ç—Ç–æ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤—ã–π—Ç–∏ –Ω–∞ —Å–æ–∑–≤–æ–Ω. –ú–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Å–µ–≥–æ 30 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –≤—Å–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏ –ø–æ–º–æ—á—å –Ω–∞–∫–æ–Ω–µ—Ü –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?";

export class Processor {
  private worker: Worker<IProcessingTask>;
  private queue: Queue<IProcessingTask>;
  private userRepo: Repository<User>;

  constructor(
    private clients: Map<string, TelegramClient>,
    private openai: OpenAI,
    private reporter: TelegramBot,
    private sender: Sender
  ) {
    this.userRepo = AppDataSource.getRepository(User);
    this.handler = this.handler.bind(this);
    this.process = this.process.bind(this);
    this.queue = new Queue('proc', {
        connection: {
            host: 'redis'
        }
    });
    this.worker = new Worker('proc', this.handler, {
        connection: {
            host: 'redis'
        },
        limiter: {
            max: 300,
            duration: 60000,
          },
        concurrency: 10
    })
  }

  private async handler(job: Job<IProcessingTask>) {
    try {
      const client = this.clients.get(job.data.bot.id);
      const result = await Randomiser.randomise(startMessage, (await client!.getMe()).firstName!)
      const thread = await this.openai.beta.threads.create({
        messages: [
          {
            content: result,
            role: "assistant",
          },
        ],
      });
      const user = await this.userRepo.findOne({
        where: {
          usernameOrPhone: job.data.user.usernameOrPhone,
        },
        relations: {
          cascade: true
        }
      });

      if (!user)
        throw new UnknownError(
          "User is NULL",
          "Processing queue",
          this.reporter
        );
      user.cascade = new CascadeUser();
      user.cascade.threadId = thread.id;
      user.cascade.bot = job.data.bot;
      await this.userRepo.save(user);
      await this.sender.add(job.data.bot.queueIdx, {
        bot: job.data.bot.id,
        text: result,
        user: job.data.user.usernameOrPhone,
        first: true,
      });
    } catch (e) {
      console.log(e);
    }
  }

  public async process(bot: Bot, user: User) {
    await this.queue.add("process", {
        bot,
        user
    });
  }
}
