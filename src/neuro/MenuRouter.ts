import TelegramBot, { InlineKeyboardButton } from "node-telegram-bot-api";
import { bot } from ".";
import { Assistant } from "../entity/assistants/Assistant";
import { Router } from "./router";
import { User } from "../entity/User";
import { Thread } from "../entity/assistants/Thread";
import dayjs from "dayjs";
import { MessageFormatter } from "../utils/MessageFormatter";

export class MenuRouter extends Router {
  constructor() {
    super();
    bot.onText(/\/neuro/, async (msg) => {
      try {
        const assistants = await Router.manager.find(Assistant);
        let result: InlineKeyboardButton[][] = [];
        let u = await Router.manager.findOneBy(User, {
          chatId: String(msg.from!.id),
        });
        if (!u) {
          u = new User();
          u.chatId = String(msg.from!.id);
          await Router.manager.save(u);
        }
        await Router.resetWaiters(u);
        for (const a of assistants) {
          result.push([
            {
              text: a.name,
              callback_data: `a-${a.id}`,
            },
          ]);
        }

        result.push([
          {
            text: "–î–∏–∑–∞–π–Ω –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫",
            callback_data: "images",
          },
        ]);

        await bot.sendMessage(msg.from!.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", {
          reply_markup: {
            inline_keyboard: result,
          },
        });
      } catch (err) {
        Router.logger.fatal(err);
      }
    });

    bot.onText(/\/start/, async (msg) => {
      let user = await Router.manager.findOneBy(User, {
        chatId: String(msg.from!.id),
      });

      if (!user) {
        const refId = msg.text!.split(' ')[1];
        user = new User();
        user.chatId = String(msg.from!.id);
        user.addBalance = Math.round(10000*34/10000);
        if (refId) {
          const creator = await Router.manager.findOneBy(User, {
            chatId: refId
          });
          if (creator) {
            creator.addBalance += Math.round(3000*34/10000);
            await Router.manager.save(creator);
            user.addBalance += Math.round(5000*34/10000);
          }
        }

        await Router.manager.save(user);
      } 
      await Router.resetWaiters(user);

      await bot.sendMessage(
        msg.from!.id,
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ SmartComarde. –ì–æ—Ç–æ–≤ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò? –í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é –Ω–∏–∂–µ.",
      );
    });

    bot.onText(/\/deletecontext/, async (msg) => {
      try {
        const u = await Router.manager.findOne(User, {
          where: {
            chatId: String(msg.from!.id),
          },
          relations: {
            action: true,
            threads: true,
          },
        });
        if (!u) return;
        await Router.resetWaiters(u);

        const t = u.threads.find((t) => t.actionId === u.actionId);

        await Router.manager.delete(Thread, {
          id: t?.id,
        });
        await Router.queue.add("j", {
          actionId: u.actionId,
          userId: u.chatId,
          task: "delete",
          type: "neuro",
          id: t?.id,
        });
      } catch (err) {
        Router.logger.fatal(err);
      }
    });

    bot.onText(/\/balance/, async (msg) => {
      const user = await Router.manager.findOneBy(User, {
        chatId: String(msg.from!.id),
      });
      if (!user) return;
      const now = dayjs();
      await Router.resetSub(user);
      await Router.resetWaiters(user);
      await bot.sendMessage(
        msg.from!.id,
        `–ë–∞–ª–∞–Ω—Å –∏ –ø–æ–¥–ø–∏—Å–∫–∞\n\nüü£ –§–æ—Ä–º–∞—Ç –¥–æ—Å—Ç—É–ø–∞:\n‚§∑ ${user.subscription === "exlusive" ? "Exclusive" : user.subscription === "premium" ? "Premium" : user.subscription === "pro" ? "PRO+" : user.subscription === "lite" ? "Lite" : "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"}
         ‚§∑ –°–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.round((user.leftForToday / 34) * 10000)} / ${
           user.subscription === "exlusive"
             ? 135000
             : user.subscription === "premium"
               ? 45000
               : user.subscription === "pro"
                 ? 30000
                 : user.subscription === "lite"
                   ? 5000
                   : 0
         } —Ç–æ–∫–µ–Ω–æ–≤
         ‚§∑ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${user.subscription === "none" ? "–ù–µ—Ç" : 24 - now.hour()}:${59 - now.minute()}
         ‚§∑ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ${user.endDate == null ? "–ù–µ—Ç" : user.endDate.toUTCString()}
      
      üü£ –í–∞—à –∫–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤:
         ‚§∑ ${Math.round((user.addBalance / 34) * 10000)}
      
      üì¶ –ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ‚Äì –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ö–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤. –ü–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Ä–∞–∑.`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                  callback_data: "b-sub",
                },
              ],
              [
                {
                  text: "–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã",
                  callback_data: "b-tokens",
                },
              ],
            ],
          },
        },
      );
    });

    bot.onText(/\/settings/, async (msg) => {
      await bot.sendMessage(msg.from!.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å",
                callback_data: "change-model",
              },
            ],
            [
              {
                text: "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                callback_data: "change-name",
              },
            ],
            [
              {
                text: "–ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤",
                callback_data: "change-count",
              },
            ],
          ],
        },
      });
    });

    bot.onText(/\/ref/, async (msg) => {
      const u = await Router.manager.findOneBy(User, {
        chatId: String(msg.from!.id)
      });
      if (!u) return;
      await bot.sendMessage(msg.from!.id, `–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ 3000 —Ç–æ–∫–µ–Ω–æ–≤! –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/NComrades_bot?start=${msg.from!.id}`);
    });

    bot.onText(/\/about/, async (msg) => {
      await MessageFormatter.sendTextFromFileBot(bot, 'guide.txt', msg.from!.id);
    });

    this.onCallback = this.onCallback.bind(this);
  }

  public async onCallback(q: TelegramBot.CallbackQuery) {
    try {
      if (q.data === "menu") {
        const user = await Router.manager.findOneBy(User, {
          chatId: String(q.from.id),
        });
        if (!user) return;
        if (user.usingImageGeneration) {
          user.usingImageGeneration = false;
          await Router.manager.save(user);
        }

        const assistants = await Router.manager.find(Assistant);
        let result: InlineKeyboardButton[][] = [];
        let u = await Router.manager.findOneBy(User, {
          chatId: String(q.from.id),
        });
        for (const a of assistants) {
          result.push([
            {
              text: a.name,
              callback_data: `a-${a.id}`,
            },
          ]);
        }

        result.push([
          {
            text: "–î–∏–∑–∞–π–Ω –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫",
            callback_data: "images",
          },
        ]);

        await bot.sendMessage(q.from.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", {
          reply_markup: {
            inline_keyboard: result,
          },
        });
      }

      if (q.data === "settings") {
        await bot.sendMessage(q.from.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å",
                  callback_data: "change-model",
                },
              ],
              [
                {
                  text: "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                  callback_data: "change-name",
                },
              ],
              [
                {
                  text: "–ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤",
                  callback_data: "change-count",
                },
              ],
            ],
          },
        });
      }
    } catch (err) {
      Router.logger.fatal(err);
    }
  }
}
