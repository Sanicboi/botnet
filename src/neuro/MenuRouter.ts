import TelegramBot, { InlineKeyboardButton } from "node-telegram-bot-api";
import { bot, openai } from ".";
import { Assistant } from "../entity/assistants/Assistant";
import { Router } from "./router";
import { User } from "../entity/User";
import dayjs from "dayjs";
import { MessageFormatter } from "../utils/MessageFormatter";
import { Btn } from "./utils";
import { OpenAI } from "./OpenAI";
import { wait } from "../utils/wait";
import { Thread } from "../entity/assistants/Thread";

export class MenuRouter extends Router {
  constructor() {
    super();
    bot.onText(/\/neuro/, async (msg) => {
      try {
        const assistants = await Router.manager.find(Assistant, {
          take: 7,
          where: {},
          order: {
            id: "ASC",
          },
        });
        let result: InlineKeyboardButton[][] = [];
        let u = await Router.manager.findOne(User, {
          where: {
            chatId: String(msg.from!.id),
          },
          relations: {
          },
        });
        if (!u) {
          u = new User();
          u.chatId = String(msg.from!.id);
          await Router.manager.save(u);
        }
        await Router.resetWaiters(u);
        result.push(
          Btn("ü§ñ–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º", "ac-asst_5oeIoYRLcSgupyUaPQF8Rp2N"),
        );
        for (const a of assistants) {
          result.push(Btn(a.name, `a-${a.id}`));
        }

        result.push(Btn("üë®‚Äçüé®–î–∏–∑–∞–π–Ω", "images"));
        result.push(Btn("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "menu-2"));

        await bot.sendMessage(msg.from!.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", {
          reply_markup: {
            inline_keyboard: result,
          },
        });
      } catch (err) {
        Router.logger.fatal(err);
      }
    });

    bot.onText(/\/start/, async (msg) => {
      let user = await Router.manager.findOneBy(User, {
        chatId: String(msg.from!.id),
      });

      if (!user) {
        const refId = msg.text!.split(" ")[1];
        user = new User();
        user.chatId = String(msg.from!.id);
        if (refId) {
          const creator = await Router.manager.findOneBy(User, {
            chatId: refId,
          });
          if (creator) {
            if (creator.inviteCount <= 29) {
              creator.addBalance += Math.round((1000 * 3.4) / 10000);
              creator.inviteCount++;
              await Router.manager.save(creator);
            }
          }
        }

        await Router.manager.save(user);
      }
      await Router.resetWaiters(user);

      await bot.sendMessage(
        msg.from!.id,
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!üëã\n\nSmartComrade - —ç—Ç–æ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –æ–±—É—á–µ–Ω–Ω—ã–º–∏ –Ω–µ–π—Ä–æ-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π!\n–ó–¥–µ—Å—å –º—ã –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏ –ª—É—á—à–µ–µ –∏–∑ –º–∏—Ä–∞ –Ω–µ–π—Ä–æ-—Å–µ—Ç–µ–π –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n\n–°–¥–µ–ª–∞–π —Å–≤–æ—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –Ω–µ–π—Ä–æ-—Å–µ—Ç—è–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏)\n\n–ò –¥–∞, –Ω–µ –Ω—É–∂–Ω—ã –Ω–∏–∫–∞–∫–∏–µ –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã!))\n\n–ù–µ –∑–∞–±—É–¥—å –∑–∞–±—Ä–∞—Ç—å –∞—Ñ–∏–≥–µ–Ω–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –Ω–µ–π—Ä–æ-—Å–µ—Ç—è–º –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –ø–æ–º–æ—â–Ω–∏–∫–µ! @SC_NewsBot\n–ê —Ç–∞–∫–∂–µ, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://t.me/SmartComrade1",
      );
    });

    bot.onText(/\dialogs/, async (msg) => {
      try {
        const threads = await Router.manager.find(Thread, {
          relations: {
            action: true
          },
          where: {
            userId: String(msg.from!.id)
          }
        });
        let btns: InlineKeyboardButton[][] = [];
        for (const t of threads) {
          btns.push(Btn(`${t.action.name} ${t.firstMsg}`.substring(0, 40) + '...', `thread-${t.id}`));
        }

        if (btns.length == 0) {
          await bot.sendMessage(msg.from!.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤");
          return;
        }

        await bot.sendMessage(msg.from!.id, '–í–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏', {
          reply_markup: {
            inline_keyboard: btns
          }
        })
      } catch (err) {
        Router.logger.fatal(err);
      }
    });

    bot.onText(/\/balance/, async (msg) => {
      const user = await Router.manager.findOne(User, {
        where: {
          chatId: String(msg.from!.id),
        },
        relations: {
          threads: true,
        },
      });
      if (!user) return;
      const now = dayjs();
      await Router.resetSub(user);
      await Router.resetWaiters(user);
      await bot.sendMessage(
        msg.from!.id,
        `–ë–∞–ª–∞–Ω—Å –∏ –ø–æ–¥–ø–∏—Å–∫–∞\n\nüü£ –§–æ—Ä–º–∞—Ç –¥–æ—Å—Ç—É–ø–∞:\n‚§∑ ${user.subscription === "exclusive" ? "Exclusive" : user.subscription === "premium" ? "Premium" : user.subscription === "pro" ? "PRO+" : user.subscription === "lite" ? "Lite" : "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"}
         ‚§∑ –°–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.round((user.leftForToday / 3.4) * 10000)} / ${
           user.subscription === "exclusive"
             ? 135000
             : user.subscription === "premium"
               ? 45000
               : user.subscription === "pro"
                 ? 30000
                 : user.subscription === "lite"
                   ? 5000
                   : 0
         } —Ç–æ–∫–µ–Ω–æ–≤
         ‚§∑ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${user.subscription === "none" ? "–ù–µ—Ç" : `${24 - now.hour()}:${59 - now.minute()}`}
         ‚§∑ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ${user.nextPayment == null ? "–ù–µ—Ç" : user.nextPayment.toUTCString()}
      
      üü£ –í–∞—à –∫–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤:
         ‚§∑ ${Math.round((user.addBalance / 3.4) * 10000)}
      
      üì¶ –ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ‚Äì –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ö–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤. –ü–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Ä–∞–∑.\n\n–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ [—Å–ø—Ä–∞–≤–∫–æ–π –æ —Ç–∞—Ä–∏—Ñ–∞—Ö](https://docs.google.com/document/d/1CbyIi8h7e51B2OUEcXe85PS9FhLw8Mli7iw4o0RRCDM/edit)`,
        {
          reply_markup: {
            inline_keyboard: [
              Btn("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "b-sub"),
              Btn("–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", "b-tokens"),
            ],
          },
          parse_mode: "Markdown",
        },
      );
    });

    bot.onText(/\/settings/, async (msg) => {
      await bot.sendMessage(msg.from!.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å",
                callback_data: "change-model",
              },
            ],
            [
              {
                text: "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                callback_data: "change-name",
              },
            ],
            [
              {
                text: "–ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤",
                callback_data: "change-count",
              },
            ],
          ],
        },
      });
    });

    bot.onText(/\/ref/, async (msg) => {
      const u = await Router.manager.findOneBy(User, {
        chatId: String(msg.from!.id),
      });
      if (!u) return;
      if (u.inviteCount < 30) {
        await bot.sendMessage(
          msg.from!.id,
          `üíå –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å 1000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!
  
  - –ö–æ–≥–¥–∞ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å;
  - –í—Å–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å 30-x –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ${u.inviteCount}/30 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π);
  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–ø–µ—Ä–≤—ã–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø–æ –≤–∞—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.

  –î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
  `,
        );
        await wait(10);
        await bot.sendMessage(
          msg.from!.id,
          `–ü—Ä–∏–≤–µ—Ç!üëã\n –Ø –Ω–∞—à–µ–ª –∫—Ä—É—Ç–æ–π —Å–µ—Ä–≤–∏—Å ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –Ω–µ–π—Ä–æ-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á.. üéØ –£–∂–µ –ø–æ–ª—å–∑—É—é—Å—å, –∏ —Ä–µ–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ!üòç\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞–π –±–æ—Ç–∞ ‚Äî —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è! üòâ\nhttps://t.me/NComrades_bot?start=${msg.from!.id}`,
        );
      } else {
        await bot.sendMessage(
          msg.from!.id,
          `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –í—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ 30 –¥—Ä—É–∑–µ–π`,
        );
      }
    });

    bot.onText(/\/about/, async (msg) => {
      await MessageFormatter.sendTextFromFileBot(
        bot,
        "about-neuro.txt",
        msg.from!.id,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏",
                  url: "https://drive.google.com/file/d/1oJcInZJShwd-LI4EYlAIBBgRWpEfMHlv/view?usp=drivesdk",
                },
              ],
              [
                {
                  text: "–ù–∞—à –∫–∞–Ω–∞–ª",
                  url: "https://t.me/SmartComrade1",
                },
              ],
              [
                {
                  text: "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                  url: "https://t.me/SC_NewsBot"
                }
              ]
            ],
          },
        },
      );
    });

    bot.onText(/\/help/, async (msg) => {
      await MessageFormatter.sendTextFromFileBot(
        bot,
        "help-neuro.txt",
        msg.from!.id,
      );
    });

    bot.onText(/\/terms/, async (msg) => {
      await MessageFormatter.sendTextFromFileBot(
        bot,
        "terms.txt",
        msg.from!.id,
        {
          parse_mode: "Markdown",
        },
      );
    });

    bot.onText(/\/data/, async (msg) => {
      
      const assistants = await Router.manager.find(Assistant);

      let kb: InlineKeyboardButton[][] = []; 
      
      for (const assistant of assistants) {
        kb.push(Btn(assistant.name, `data-${assistant.id}`));
      }

      await bot.sendMessage(msg.from!.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", {
        reply_markup: {
          inline_keyboard: kb
        }
      });
    })

    this.onCallback = this.onCallback.bind(this);
  }

  public async onCallback(q: TelegramBot.CallbackQuery) {
    try {
      if (q.data === "menu-1") {
        const user = await Router.manager.findOneBy(User, {
          chatId: String(q.from.id),
        });
        if (!user) return;
        if (user.usingImageGeneration) {
          user.usingImageGeneration = false;
          await Router.manager.save(user);
        }

        const assistants = await Router.manager.find(Assistant, {
          take: 7,
          where: {},
          order: {
            id: "ASC",
          },
        });
        let result: InlineKeyboardButton[][] = [];
        result.push(
          Btn("ü§ñ–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º", "ac-asst_5oeIoYRLcSgupyUaPQF8Rp2N"),
        );
        for (const a of assistants) {
          result.push([
            {
              text: a.name,
              callback_data: `a-${a.id}`,
            },
          ]);
        }

        result.push(Btn("üë®‚Äçüé®–î–∏–∑–∞–π–Ω", "images"));
        result.push(Btn("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "menu-2"));

        await bot.sendMessage(q.from.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", {
          reply_markup: {
            inline_keyboard: result,
          },
        });
      }

      if (q.data === "settings") {
        await bot.sendMessage(q.from.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", {
          reply_markup: {
            inline_keyboard: [
              Btn("–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", "change-model"),
              Btn("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "change-name"),
              Btn("–ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤", "change-count"),
            ],
          },
        });
      }

      if (q.data === "menu-2") {
        const user = await Router.manager.findOneBy(User, {
          chatId: String(q.from.id),
        });
        if (!user) return;
        if (user.usingImageGeneration) {
          user.usingImageGeneration = false;
          await Router.manager.save(user);
        }

        const assistants = await Router.manager.find(Assistant, {
          skip: 7,
          where: {},
          order: {
            id: "ASC",
          },
        });
        let result: InlineKeyboardButton[][] = [];
        for (const a of assistants) {
          result.push([
            {
              text: a.name,
              callback_data: `a-${a.id}`,
            },
          ]);
        }

        result.push(Btn("–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "menu-1"));

        await bot.sendMessage(q.from.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", {
          reply_markup: {
            inline_keyboard: result,
          },
        });
      }

      if (q.data?.startsWith("aimodel-")) {
        // @ts-ignore
        const m: OpenAI.ChatModel = q.data!.substring(8);
        const user = await Router.manager.findOneBy(User, {
          chatId: String(q.from.id),
        });
        if (!user) return;
        user.model = m;
        await Router.manager.save(user);

        await bot.sendMessage(q.from.id, "–ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `${m === "gpt-4o-mini" ? "‚úÖ" : ""} GPT 4 Omni mini`,
                  callback_data: "aimodel-gpt-4o-mini",
                },
              ],
              [
                {
                  text: `${m === "gpt-4o" ? "‚úÖ" : ""} GPT 4 Omni`,
                  callback_data: "aimodel-gpt-4o",
                },
              ],
              [
                {
                  text: `${m === "gpt-4-turbo" ? "‚úÖ" : ""} GPT 4 Turbo`,
                  callback_data: "aimodel-gpt-4-turbo",
                },
              ],
            ],
          },
        });
      }

      if (q.data?.startsWith("thread-")) {
        const tId = q.data.substring(7);
        const thread = await Router.manager.findOne(Thread, {
          where: {
            id: tId
          },
          relations: {
            action: {
              assistant: true
            }
          }
        });

        if (!thread) return;

        const gptData = await openai.beta.threads.messages.list(thread.id);

        
        await bot.sendMessage(q.from.id, `–î–∏–∞–ª–æ–≥ #${thread.id.substring(7)}\n–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n‚§∑–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:${gptData.data.length}\n‚§∑–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${thread.action.assistant.name} - ${thread.action.name}\n`, {
          reply_markup: {
            inline_keyboard: [
              Btn('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥', `continue-${thread.id}`),
              Btn('–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥', `del-${thread.id}`)
            ]
          }
        })
      }

      if (q.data?.startsWith("del-")) {
        await OpenAI.deleteThread(q);
      }

      if (q.data?.startsWith('continue-')) {
        const thread = q.data.substring(9);
        const u = await Router.manager.findOneBy(User, {
          chatId: String(q.from.id)
        });
        if (!u) return;
        u.threadId = thread;
        await Router.manager.save(u);
      }

      if (q.data?.startsWith("data-")) {
        const user = await Router.manager.findOneBy(User, {
          chatId: String(q.from.id)
        });

        if (!user) return;

        user.waitingForData = q.data.substring(5);
        await Router.manager.save(user);

        const asst = await Router.manager.findOneBy(Assistant, {
          id: user.waitingForData
        });

        if (!asst) return;

        await bot.sendMessage(q.from.id, asst.dataToFill);
        
      }

      if (q.data === "balance") {
        const user = await Router.manager.findOne(User, {
          where: {
            chatId: String(q.from!.id),
          },
          relations: {
            threads: true,
          },
        });
        if (!user) return;
        const now = dayjs();
        await Router.resetSub(user);
        await Router.resetWaiters(user);
        await bot.sendMessage(
          q.from.id,
          `–ë–∞–ª–∞–Ω—Å –∏ –ø–æ–¥–ø–∏—Å–∫–∞\n\nüü£ –§–æ—Ä–º–∞—Ç –¥–æ—Å—Ç—É–ø–∞:\n‚§∑ ${user.subscription === "exclusive" ? "Exclusive" : user.subscription === "premium" ? "Premium" : user.subscription === "pro" ? "PRO+" : user.subscription === "lite" ? "Lite" : "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"}
           ‚§∑ –°–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.round((user.leftForToday / 3.4) * 10000)} / ${
             user.subscription === "exclusive"
               ? 135000
               : user.subscription === "premium"
                 ? 45000
                 : user.subscription === "pro"
                   ? 30000
                   : user.subscription === "lite"
                     ? 5000
                     : 0
           } —Ç–æ–∫–µ–Ω–æ–≤
           ‚§∑ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${user.subscription === "none" ? "–ù–µ—Ç" : `${24 - now.hour()}:${59 - now.minute()}`}
           ‚§∑ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ${user.nextPayment == null ? "–ù–µ—Ç" : user.nextPayment.toUTCString()}
        
        üü£ –í–∞—à –∫–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤:
           ‚§∑ ${Math.round((user.addBalance / 3.4) * 10000)}
        
        üì¶ –ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ‚Äì –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ö–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤. –ü–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Ä–∞–∑.\n\n–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ [—Å–ø—Ä–∞–≤–∫–æ–π –æ —Ç–∞—Ä–∏—Ñ–∞—Ö](https://docs.google.com/document/d/1CbyIi8h7e51B2OUEcXe85PS9FhLw8Mli7iw4o0RRCDM/edit)`,
          {
            reply_markup: {
              inline_keyboard: [
                Btn("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "b-sub"),
                Btn("–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", "b-tokens"),
              ],
            },
            parse_mode: "Markdown",
          },
        );
      }
    } catch (err) {
      Router.logger.fatal(err);
    }
  }
}
