import TelegramBot from "node-telegram-bot-api";
import { Router } from "./router";
import { User } from "../entity/User";
import { bot } from ".";

export class SettingsRouter extends Router {
	constructor() {
		super();

		this.onCallback = this.onCallback.bind(this);
		this.onText = this.onText.bind(this);
	}

	public async onCallback(q: TelegramBot.CallbackQuery) {
		if (q.data === "change-name") {
			const user = await Router.manager.findOneBy(User, {
				chatId: String(q.from.id),
			});
			if (!user) return;
			user.waitingForName = true;
			await Router.manager.save(user);
			await bot.sendMessage(
				q.from.id,
				"–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à–µ –∏–º—è. –Ø –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ —ç—Ç–æ–º—É –∏–º–µ–Ω–∏! üòä",
			);
		}
		if (q.data === "toggle-count") {
			const user = await Router.manager.findOneBy(User, {
				chatId: String(q.from.id),
			});
			if (!user) return;
			user.countTokens = !user.countTokens;
			await Router.manager.save(user);
			await bot.sendMessage(q.from.id, "–ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑–º–µ–Ω–µ–Ω", {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ù–∞–∑–∞–¥",
								callback_data: "change-count",
							},
						],
					],
				},
			});
		}

		if (q.data === "change-count") {
			const user = await Router.manager.findOneBy(User, {
				chatId: String(q.from.id),
			});
			if (!user) return;
			await bot.sendMessage(
				q.from.id,
				`üìä –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é. –í –ø–æ–¥—Å—á—ë—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è (–ø–∞–º—è—Ç—å). 
  
  –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
  
  ‚úÖ –í–∫–ª—é—á–∏—Ç—å - –í—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç. 
  
  ‚úñÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å - –í—ã –Ω–µ –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –±–æ–ª–µ–µ —á–∏—Å—Ç—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è –Ω–∞ –ø–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ –≤—Ä–µ–º—è –æ–±—â–µ–Ω–∏—è.
  `,
				{
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: user.countTokens
										? "‚úñÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å"
										: "‚úÖ –í–∫–ª—é—á–∏—Ç—å",
									callback_data: "toggle-count",
								},
							],
							[
								{
									text: "–ù–∞–∑–∞–¥",
									callback_data: "settings",
								},
							],
						],
					},
				},
			);
		}

		if (q.data?.startsWith("model-")) {
			const model = q.data.substring(6);
			const user = await Router.manager.findOneBy(User, {
				chatId: String(q.from.id),
			});
			if (!user) return;
			//@ts-ignore
			user.model = model;
			await Router.manager.save(user);
			await bot.sendMessage(q.from.id, "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ù–∞–∑–∞–¥",
								callback_data: "settings",
							},
						],
					],
				},
			});
		}

		if (q.data === "change-model") {
			await bot.sendMessage(q.from.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "GPT 4 Omni mini",
								callback_data: "model-gpt-4o-mini",
							},
						],
						[
							{
								text: "GPT 4 Omni",
								callback_data: "model-gpt-4o",
							},
						],
						[
							{
								text: "GPT 4 Turbo",
								callback_data: "model-gpt-4-turbo",
							},
						],
						[
							{
								text: "–ù–∞–∑–∞–¥",
								callback_data: "settings",
							},
						],
					],
				},
			});
		}
	}

	public async onText(msg: TelegramBot.Message, u: User): Promise<boolean> {
		if (u.waitingForName) {
			u.name = msg.text!;
			u.waitingForName = false;
			await Router.manager.save(u);
			await bot.sendMessage(msg.from!.id, "–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ", {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ù–∞–∑–∞–¥",
								callback_data: "settings",
							},
						],
					],
				},
			});
			return true;
		}
		return false;
	}
}
