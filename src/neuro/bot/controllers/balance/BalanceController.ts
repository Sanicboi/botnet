import dayjs from "dayjs";
import { AppDataSource } from "../../../../data-source";
import { SubType, User } from "../../../../entity/User";
import { Bot } from "../../../Bot";
import { IController } from "../../Controller";
import { Converter } from "./Converter";
import { InlineKeyboardButton } from "node-telegram-bot-api";
import { Btn } from "../../../utils";
import { ICreatePayment, YooCheckout } from "@a2seven/yoo-checkout";

const manager = AppDataSource.manager;

const checkout = new YooCheckout({
  secretKey: process.env.YOOKASSA_KEY ?? "",
  shopId: process.env.YOOKASSA_SHOP_ID ?? "",
});

const tokensToPriceMap: Map<number, number> = new Map();
tokensToPriceMap.set(10000, 99);
tokensToPriceMap.set(30000, 255);
tokensToPriceMap.set(10000, 690);
tokensToPriceMap.set(200000, 1490);
tokensToPriceMap.set(500000, 3525);
tokensToPriceMap.set(1000000, 4990);

const priceToTokensMap: Map<number, number> = new Map();

for (const [k, v] of tokensToPriceMap) {
  priceToTokensMap.set(v, k);
}

const subToTokensMap: Map<string, number> = new Map();
subToTokensMap.set("none", 0);
subToTokensMap.set("lite", 5000);
subToTokensMap.set("pro", 30000);
subToTokensMap.set("premium", 45000);
subToTokensMap.set("exclusive", 135000);

const subToPriceMap = new Map<SubType, number>();
subToPriceMap.set("lite", 490);
subToPriceMap.set("pro", 790);
subToPriceMap.set("premium", 1490);
subToPriceMap.set("exclusive", 3490);

const priceToSubMap: Map<number, SubType> = new Map();

for (const [k, v] of subToPriceMap) {
  priceToSubMap.set(v, k);
}

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–∞–ª–∞–Ω—Å–∞
 * —Å–ª–µ–¥–∏—Ç –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤—Å–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –æ–ø–ª–∞—Ç–æ–π
 */
export class BalanceController implements IController {
  /**
   * –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
   * @param bot –ë–æ—Ç
   */
  constructor(private bot: Bot) {}

  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞
   */
  public bind() {}

  /**
   * –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
   * @param user –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns –õ–∏–º–∏—Ç –∏–ª–∏ false, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç
   */
  public async getLimit(user: User): Promise<number | false> {
    const sum = user.addBalance + user.leftForToday;
    if (sum <= 0) {
      await this.bot.bot.sendMessage(
        +user.chatId,
        "‚ùå–£–ø—Å! –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤‚Ä¶",
      );
      return false;
    }

    return Converter.RUBTK(sum, user.model);
  }

  /**
   * –ú–µ—Ç–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è —Å—É–º–º—ã —Å –±–∞–ª–∞–Ω—Å–∞
   * @param rubles —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Å–ø–∏—Å–∞—Ç—å
   * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  public async subtractCost(rubles: number, user: User) {
    let toSubtract = rubles;
    let min = Math.min(user.leftForToday, rubles);
    toSubtract -= min;
    user.leftForToday -= min;
    if (toSubtract > 0) user.addBalance -= toSubtract;
    await manager.save(user);
  }

  private async onBalance(user: User) {
    const now = dayjs();

    let keyboard: InlineKeyboardButton[][] = [Btn("–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", "b-tokens")];
    if (user.subscription === "none") {
      keyboard.push(Btn("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "b-sub"));
    } else {
      keyboard.push(Btn("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "cancel-sub"));
    }

    await this.bot.bot.sendMessage(
      +user.chatId,
      `–ë–∞–ª–∞–Ω—Å –∏ –ø–æ–¥–ø–∏—Å–∫–∞\n\nüü£ –§–æ—Ä–º–∞—Ç –¥–æ—Å—Ç—É–ø–∞:\n‚§∑ ${user.subscription === "exclusive" ? "Exclusive" : user.subscription === "premium" ? "Premium" : user.subscription === "pro" ? "PRO+" : user.subscription === "lite" ? "Lite" : "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"}\n\n‚§∑ –°–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: ${Converter.RUBSMT(user.leftForToday).toFixed(0)} / ${subToTokensMap.get(user.subscription)} —Ç–æ–∫–µ–Ω–æ–≤\n‚§∑ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${user.subscription === "none" ? "–ù–µ—Ç" : `${24 - now.hour()}:${59 - now.minute()}`}\n‚§∑ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ${user.nextPayment == null ? "–ù–µ—Ç" : user.nextPayment.toUTCString()}\n\nüü£ –í–∞—à –∫–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤:\n‚§∑ ${Converter.RUBSMT(user.addBalance).toFixed(0)}\n\n\nüì¶ –ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ‚Äì –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ö–æ–º–ø–ª–µ–∫—Ç —Ç–æ–∫–µ–Ω–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤. –ü–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Ä–∞–∑.\n\n–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ [—Å–ø—Ä–∞–≤–∫–æ–π –æ —Ç–∞—Ä–∏—Ñ–∞—Ö](https://docs.google.com/document/d/1CbyIi8h7e51B2OUEcXe85PS9FhLw8Mli7iw4o0RRCDM/edit)`,
      {
        reply_markup: {
          inline_keyboard: keyboard,
        },
        parse_mode: "Markdown",
      },
    );
  }

  private async onBuySubscription(user: User) {
    await this.bot.bot.sendMessage(
      +user.chatId,
      "üëá–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
      {
        reply_markup: {
          inline_keyboard: [
            Btn("Lite |5.000 —Ç–æ–∫–µ–Ω–æ–≤/–¥–µ–Ω—å| (490‚ÇΩ/–º–µ—Å)", "sub-lite"),
            Btn("Pro+ |30.000 —Ç–æ–∫–µ–Ω–æ–≤/–¥–µ–Ω—å| (790‚ÇΩ/–º–µ—Å)", "sub-pro"),
            Btn("Premium |45.000 —Ç–æ–∫–µ–Ω–æ–≤/–¥–µ–Ω—å| (1490‚ÇΩ/–º–µ—Å)", "sub-premium"),
            Btn(
              "Exclusive |135.000 —Ç–æ–∫–µ–Ω–æ–≤/–¥–µ–Ω—å| (3490‚ÇΩ/–º–µ—Å)",
              "sub-exclusive",
            ),
            Btn("–ù–∞–∑–∞–¥", "balance"),
          ],
        },
      },
    );
  }

  private async onSubType(user: User, t: string) {
    const type = t as SubType;
    const price = subToPriceMap.get(type)!;

    const invoice: ICreatePayment = {
      amount: {
        currency: "RUB",
        value: `${price}.00`,
      },
      capture: true,
      confirmation: {
        type: "redirect",
        return_url: "https://t.me/NComrades_bot",
      },
      description: `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏`,
      merchant_customer_id: user.chatId,
      save_payment_method: true,
    };

    const result = await checkout.createPayment(invoice);
    await this.bot.bot.sendMessage(
      +user.chatId,
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"',
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–û–ø–ª–∞—Ç–∏—Ç—å",
                url: result.confirmation.confirmation_url,
              },
            ],
            Btn("–Ø –æ–ø–ª–∞—Ç–∏–ª", `ihavepaid-sub-${result.id}`),
          ],
        },
      },
    );
  }

  private async onTokensType(user: User, n: number) {
    const price = tokensToPriceMap.get(n)!;

    const invoice: ICreatePayment = {
      amount: {
        currency: "RUB",
        value: `${price}.00`,
      },
      capture: true,
      confirmation: {
        type: "redirect",
        return_url: "https://t.me/NComrades_bot",
      },
      description: `–û–ø–ª–∞—Ç–∞ –ø–∞–∫–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤: ${n} —Ç–æ–∫–µ–Ω–æ–≤`,
      merchant_customer_id: user.chatId,
    };

    const result = await checkout.createPayment(invoice);
    await this.bot.bot.sendMessage(
      +user.chatId,
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"',
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–û–ø–ª–∞—Ç–∏—Ç—å",
                url: result.confirmation.confirmation_url,
              },
            ],
            Btn("–Ø –æ–ø–ª–∞—Ç–∏–ª", `ihavepaid-tokens-${result.id}`),
          ],
        },
      },
    );
  }

  private async onIHavePaid(user: User, data: string, msgId: number) {
    try {
      if (data.startsWith("ihavepaid-tokens-")) {
        const id = data.substring(17);
        const res = await checkout.getPayment(id);
        if (res.status === "succeeded") {
          if (res.merchant_customer_id === user.chatId) {
            const amount = parseInt(res.amount.value);
            const tokens = priceToTokensMap.get(amount)!;
            user.addBalance += Converter.SMTRUB(tokens);
            await manager.save(user);
            await this.bot.bot.sendMessage(
              +user.chatId,
              "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞ üöÄ\n–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω, –ø–æ–¥—Ä–æ–±–Ω–µ–µ: /balance\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüòâ",
            );
            await this.bot.bot.deleteMessage(+user.chatId, msgId);
          }
        } else if (res.status === "canceled") {
          await this.bot.bot.sendMessage(
            +user.chatId,
            "–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
          );
          await this.bot.bot.deleteMessage(+user.chatId, msgId);
        } else {
          await this.bot.bot.sendMessage(+user.chatId, "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂");
        }
      } else {
        const id = data.substring(14);
        const res = await checkout.getPayment(id);
        if (res.status === "succeeded") {
          if (res.merchant_customer_id === user.chatId) {
            user.subscription = priceToSubMap.get(parseInt(res.amount.value))!;
            user.leftForToday = Converter.SMTRUB(
              subToTokensMap.get(user.subscription)!,
            );
            user.nextPayment = dayjs().add(30, "days").toDate();
            if (res.payment_method_id) {
              user.paymentMethod = res.payment_method_id;
            }
            await manager.save(user);
            await this.bot.bot.sendMessage(
              +user.chatId,
              "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞ üöÄ\n–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω, –ø–æ–¥—Ä–æ–±–Ω–µ–µ: /balance\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüòâ",
            );
            await this.bot.bot.deleteMessage(+user.chatId, msgId);
          }
        } else if (res.status === "canceled") {
          await this.bot.bot.sendMessage(
            +user.chatId,
            "–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
          );
          await this.bot.bot.deleteMessage(+user.chatId, msgId);
        } else {
          await this.bot.bot.sendMessage(+user.chatId, "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂");
        }
      }
    } catch (err) {
      console.error(err);
      await this.bot.bot.deleteMessage(+user.chatId, msgId);
    }
  }

  private async resetSub(user: User) {
    user.paymentMethod = null;
    user.subscription = "none";
    user.leftForToday = 0;
    user.nextPayment = null;
    await manager.save(user);
    await this.bot.bot.sendMessage(
      +user.chatId,
      "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –µ–µ –ø—Ä–æ–¥–ª–∏—Ç—å –≤ –º–µ–Ω—é '–±–∞–ª–∞–Ω—Å –∏ –ø–æ–¥–ø–∏—Å–∫–∞'",
    );
  }

  private async updateSub(user: User) {
    if (user.subscription !== "none") {
      const now = dayjs();
      if (now.isAfter(dayjs(user.nextPayment))) {
        // next payment
        if (!user.paymentMethod) {
          return await this.resetSub(user);
        }

        const invoice: ICreatePayment = {
          amount: {
            value: `${subToPriceMap.get(user.subscription)}.00`,
            currency: "RUB",
          },
          capture: true,
          payment_method_id: user.paymentMethod,
          description: "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
        };

        const res = await checkout.createPayment(invoice);

        if (res.status === "succeeded") {
          user.nextPayment = dayjs().add(30, "days").toDate();
          await manager.save(user);
        } else {
          await this.resetSub(user);
        }
      }
    }
  }

  private async updateTokens(user: User) {
    await this.updateSub(user);
    if (user.subscription !== "none") {
      user.leftForToday = Converter.SMTRUB(
        subToTokensMap.get(user.subscription)!,
      );
      await manager.save(user);
      await this.bot.bot.sendMessage(
        +user.chatId,
        "–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø–∞—Å —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω!",
        {},
      );
    }
  }

  private async onCancelSub(user: User) {
    user.paymentMethod = "";
    await manager.save(user);
    await this.bot.bot.sendMessage(
      +user.chatId,
      "–î–∞–ª—å–Ω–µ—à–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
    );
  }
}
