import { AppDataSource } from "../../../data-source";
import { PromoCode } from "../../../entity/assistants/Promo";
import { UserPromo } from "../../../entity/assistants/UserPromo";
import { User } from "../../../entity/User";
import { Bot } from "../../Bot";
import { IController } from "../Controller";

const manager = AppDataSource.manager;

export class PromoController implements IController {
  constructor(private bot: Bot) {}

  public bind() {
    this.bot.bot.onText(/\/free/, async (msg) => {
      const user = await this.bot.getUser(msg);
      await this.onFreeTokens(user);
    });

    this.bot.addFreeTextListener(async (msg) => {
      const user = await this.bot.getUser(msg);
      if (user.waitingForPromo) {
        await this.onPromoCode(user, msg.text!);
      }
    });
  }

  private async onFreeTokens(user: User) {
    user.waitingForPromo = true;
    await manager.save(user);
    await this.bot.bot.sendMessage(
      +user.chatId,
      `–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã SmartComrade üéÅ\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –Ω–∞–ø–∏—à–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n‚ùóÔ∏è–í–∞–∂–Ω–æ: –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ START –Ω–∞ 7000 —Ç–æ–∫–µ–Ω–æ–≤.`,
    );
  }

  private async onPromoCode(user: User, name: string) {
    user.waitingForPromo = false;
    const promo = await manager.findOne(PromoCode, {
      where: {
        name,
      },
      relations: {
        userPromos: true,
      },
    });

    if (!promo) {
      await this.bot.bot.sendMessage(
        +user.chatId,
        "‚ùå–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥ –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. ‚ùóÔ∏è–í–∞–∂–Ω–æ: –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑",
      );
    } else {
      if (promo.expiresAt < new Date()) {
        await this.bot.bot.sendMessage(
          +user.chatId,
          "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏(. –î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å—Ç–µ–∫.",
        );
      } else if (promo.limit <= promo.userPromos.length) {
        await this.bot.bot.sendMessage(
          +user.chatId,
          "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏(. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥, –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç.",
        );
      } else if (
        promo.userPromos.findIndex(
          (el) => el.userId === String(+user.chatId),
        ) >= 0
      ) {
        await this.bot.bot.sendMessage(
          +user.chatId,
          "–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ –≤–≤–µ–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.",
        );
      } else {
        const uPromo = new UserPromo();
        uPromo.promoId = promo.name;
        uPromo.promo = promo;
        uPromo.userId = user.chatId;
        uPromo.user = user;
        await manager.save(uPromo);
        user.addBalance += promo.amount;
        await this.bot.bot.sendMessage(
          +user.chatId,
          "–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        );
      }
    }
  }
}
