import { AppDataSource } from "../../../../../data-source";
import { AgentModel } from "../../../../../entity/assistants/AgentModel";
import { Conversation } from "../../../../../entity/Conversation";
import { User } from "../../../../../entity/User";
import { Bot } from "../../../../Bot";
import { Btn } from "../../../../utils";
import { IController } from "../../../Controller";
import { ConversationController } from "../conversations/ConversationController";
import { DataController } from "../DataController";
import { ModelController } from "../ModelController";

const manager = AppDataSource.manager;

export class OfferCreatorController implements IController {
  private readonly _id = 2;
  private readonly _firstMessage = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ—Ñ—Ñ–µ—Ä–∞";
  private readonly _secondMessage =
    "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –º–æ–¥–µ–ª—å—é!\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üëá\n–ù–µ –∑–Ω–∞–µ—à—å –∫–∞–∫—É—é –≤—ã–±—Ä–∞—Ç—å? –°–º–æ—Ç—Ä–∏ [—Å–ø—Ä–∞–≤–∫—É](https://docs.google.com/document/d/1785aqFyeHDYV3QjfJwpA4TC-K1UjScqRRDsQoFk7Uy8/edit)";
  private readonly _thirdMessage = "–û—Ç–ª–∏—á–Ω–æ, —Å –º–æ–¥–µ–ª—å—é –æ—Ñ—Ñ–µ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å.";
  private readonly _fourthMessage = "";

  constructor(
    private bot: Bot,
    private modelController: ModelController,
    private conversationController: ConversationController,
    private dataController: DataController,
  ) {}

  public bind() {
    this.bot.addCQListener(async (q) => {
      if (q.data === "agent-2") {
        const user = await this.bot.getUser(q, {
          conversations: true,
          agent: true,
        });
        await this.onSizes(user);
      }

      if (q.data?.startsWith("offersize-")) {
        const user = await this.bot.getUser(q);
        await this.onSize(user, q.data.substring(10));
      }

      if (q.data?.startsWith("offermodel-")) {
        const user = await this.bot.getUser(q, {
          conversations: true,
          agent: true,
        });
        await this.onModel(user, q.data.substring(11));
      }
    });
  }

  private async onSizes(user: User) {
    await this.dataController.resetData(user);
    user.agent = new AgentModel();
    user.agent.id = this._id;
    await manager.save(user);

    await this.bot.bot.sendMessage(+user.chatId, this._firstMessage, {
      reply_markup: {
        inline_keyboard: [
          Btn(`–ë–æ–ª—å—à–æ–π (120-150 —Å–ª–æ–≤)`, `offersize-–±–æ–ª—å—à–æ–π (70-90 —Å–ª–æ–≤)`),
          Btn(`–°—Ä–µ–¥–Ω–∏–π (90-120 —Å–ª–æ–≤)`, `offersize-c—Ä–µ–¥–Ω–∏–π (90-120 —Å–ª–æ–≤)`),
          Btn(`–ú–∞–ª–µ–Ω—å–∫–∏–π (60-90 —Å–ª–æ–≤)`, `offersize-–º–∞–ª–µ–Ω—å–∫–∏–π (60-90 —Å–ª–æ–≤)`),
        ],
      },
    });
  }

  private async onSize(user: User, size: string) {
    user.dialogueData += `–†–∞–∑–º–µ—Ä –æ—Ñ—Ñ–µ—Ä–∞: ${size}\n`;
    await manager.save(user);
    await this.bot.bot.sendMessage(+user.chatId, this._secondMessage, {
      reply_markup: {
        inline_keyboard: [
          Btn(`AIDA`, `offermodel-AIDA`),
          Btn(`PAS`, `offermodel-PAS`),
          Btn(`FAB`, `offermodel-FAB`),
          Btn(`4Ps`, `offermodel-4PS`),
          Btn(`Quest`, `offermodel-QUEST`),
          Btn(`ACC`, `offermodel-ACC`),
          Btn(`–°–º–µ—à–∞–Ω–Ω–∞—è`, `offermodel-—Å–º–µ—à–∞–Ω–Ω–∞—è`),
        ],
      },
      parse_mode: "Markdown",
    });
  }

  private async onModel(user: User, model: string) {
    user.dialogueData += `–ú–æ–¥–µ–ª—å –æ—Ñ—Ñ–µ—Ä–∞: ${model}\n`;
    await manager.save(user);

    await this.conversationController.markAllAsInactive(user);
    await this.bot.bot.sendMessage(+user.chatId, this._thirdMessage);

    const conversation = new Conversation();
    conversation.agent = user.agent!;
    conversation.api = user.model.api;
    conversation.user = user;
    await manager.save(conversation);
    await this.bot.bot.sendMessage(
      +user.chatId,
      `${user.dialogueData}\n${this._fourthMessage}`,
    );
    // —è –Ω–µ –ø–æ–º–Ω—é, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞
    await this.modelController.sendSelectAPI(+user.chatId);
  }
}
