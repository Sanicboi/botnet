import { InlineKeyboardButton } from "node-telegram-bot-api";
import { User } from "../../../../../entity/User";
import { Bot } from "../../../../Bot";
import { Btn } from "../../../../utils";
import { IController } from "../../../Controller";
import { api } from "../../../../apis/API";
import { AppDataSource } from "../../../../../data-source";

const manager = AppDataSource.manager;

export class ConversationController implements IController {
  public bind() {}

  constructor(private bot: Bot) {}

  private async onConversations(user: User) {
    if (user.conversations.length === 0)
      return await this.bot.bot.sendMessage(+user.chatId, `–£ –í–∞—Å –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤`);
    await this.bot.bot.sendMessage(
      +user.chatId,
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–Ω–µ–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∏–∞–ª–æ–≥–∞–º –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –¥–∏–∞–ª–æ–≥—É, –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—É—Ç—å –¥–∏–∞–ª–æ–≥–∞.¬†`,
      {
        reply_markup: {
          inline_keyboard: [
            Btn("–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏", "featured-conversations"),
            Btn("–ù–µ–¥–∞–≤–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏", "all-conversations"),
          ],
        },
      }
    );
  }

  private async onFeaturedConversations(user: User) {
    const conversations = user.conversations.filter((el) => el.featured);
    const btns: InlineKeyboardButton[][] = [];

    for (const c of conversations) {
      const res = await api.conversationTopic(user, c);
      btns.push(Btn(res, `conversation-${c.id}`));
    }

    await this.bot.bot.sendMessage(
      +user.chatId,
      "üí°–≠—Ç–æ –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏!\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª—é–±–æ–º—É –∏–∑ –Ω–∏—Ö –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!",
      {
        reply_markup: {
          inline_keyboard: [
            ...btns,
            Btn("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏", "delete-featured-conversations"),
            Btn("–≠–∫—Å–ø–æ—Ä—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤", "export-featured-conversations"),
          ],
        },
      }
    );
  }

  private async onAllConversations(user: User) {
    const conversations = user.conversations.filter(el => !el.featured);
    const btns: InlineKeyboardButton[][] = [];
    for (const c of conversations) {
      btns.push(Btn(
        `–î–∏–∞–ª–æ–≥ #${c.id}`,
        `conversation-${c.id}`
      ))
    }
  }

  private async onConversation(user: User, id: number) {
    const conversation = user.conversations.find(el => el.id === id);
    if (!conversation) return;

    if (conversation.featured) {
      const summarized = await api.conversationTopic(user, conversation);
      await this.bot.bot.sendMessage(+user.chatId, `–ò–∑–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ #${conversation.id}:\n\n‚§∑ –†–µ–∂–∏–º —á–∞—Ç–∞: ${conversation.agent.group.name} - ${conversation.agent.name}\n‚§∑–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${conversation.createdAt.toLocaleDateString("ru")}\n\n–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: ${summarized}\n\n`, {
        reply_markup: {
          inline_keyboard: [
            Btn(`–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥`, `delete-conversation-${conversation.id}`),
            Btn(`–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥`, `continue-conversation-${conversation.id}`)
          ]
        }
      })
    } else {
      await this.bot.bot.sendMessage(+user.chatId, `–ò–∑–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ #${conversation.id}:\n\n‚§∑ –†–µ–∂–∏–º —á–∞—Ç–∞: ${conversation.agent.group.name} - ${conversation.agent.name}\n‚§∑–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${conversation.createdAt.toLocaleDateString("ru")}\n\n`, {
        reply_markup: {
          inline_keyboard: [
            Btn(`–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥`, `delete-conversation-${conversation.id}`),
            Btn(`–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥`, `continue-conversation-${conversation.id}`)
          ]
        }
      })
    }
  }

  private async onContinueConversation(user: User, id: number) {
    const conversation = user.conversations.find(el => el.id === id);
    if (!conversation) return;
    user.agent = conversation.agent;
    conversation.active = true;
    await manager.save(conversation);
    await manager.save(conversation);
    await this.bot.bot.sendMessage(+user.chatId, '–î–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω!');
  }

  public async onDeleteConversation(user: User, id: number, send: boolean = false) {
    const conversation = user.conversations.find(el => el.id === id);
    if (!conversation) return;
    for (const file of conversation.files) {
      await api.deleteFile(file.id, file.storedIn);
      await manager.remove(file);
    }
    await manager.remove(conversation);

    if (send) {
      await this.bot.bot.sendMessage(+user.chatId, '–î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω');
      
    }
  }


}
