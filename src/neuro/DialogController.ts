import { InlineKeyboardButton } from "node-telegram-bot-api";
import { AppDataSource } from "../data-source";
import { Dialog } from "../entity/assistants/Dialog";
import { User } from "../entity/User";
import { Bot } from "./Bot";
import { Btn } from "./utils";
import { openai } from "../neuro";
import { AgentModel } from "../entity/assistants/AgentModel";
import { DataController } from "./DataController";

const manager = AppDataSource.manager;

/**
 * This class is responsible for managing conversations
 * - This class DOES give the conversations ans helps store their IDs
 * - This class also DOES summarize the conversations
 * - This class DOES count the tokens in a conversation
 */
export class DialogController {
  constructor(
    private bot: Bot,
    private dataController: DataController,
  ) {
    bot.onDialogs(this.dialogs.bind(this));
    bot.onCreateDialog(this.createDialog.bind(this));
    bot.onDeleteDialog(this.deleteDialog.bind(this));
    bot.onDialog(this.dialog.bind(this));
    bot.onContinueDialog(this.continueDialog.bind(this));
    bot.onAllDialogs(this.allDialogs.bind(this));
    bot.onFeaturedDialogs(this.featuredDialogs.bind(this));
    bot.onRemoveFeaturedDialog(this.removeFeaturedDialog.bind(this));
    bot.onMakeFeaturedDialog(this.makeFeaturedDialog.bind(this));
    bot.onDeleteFeaturedDialogs(this.deleteFeaturedDialogs.bind(this));
    bot.onDeleteAllDialogs(this.deleteAllDialogs.bind(this));
    bot.onExportFeaturedDialogs(this.exportFeaturedDialogs.bind(this));
  }

  private async dialogs(user: User) {

    if (user.dialogs.length === 0)
      return await this.bot.bot.sendMessage(+user.chatId, `–£ –í–∞—Å –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤`);
    await this.bot.bot.sendMessage(+user.chatId, `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–Ω–µ–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∏–∞–ª–æ–≥–∞–º –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –¥–∏–∞–ª–æ–≥—É, –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—É—Ç—å –¥–∏–∞–ª–æ–≥–∞.¬†`, {
      reply_markup: {
        inline_keyboard: [
          Btn('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏', 'featured-dialogs'),
          Btn('–û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏', 'all-dialogs'),
        ],
      },
    });
  }

  private async featuredDialogs(user: User) {
    const featuredDialogs = user.dialogs.filter((dialog) => dialog.featured);
    if (featuredDialogs.length === 0) return await this.bot.bot.sendMessage(+user.chatId, `–£ –í–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤`);
    let result: InlineKeyboardButton[][] = [];

    for (const dialog of featuredDialogs) {
      result.push(Btn(dialog.firstMessage || `–î–∏–∞–ª–æ–≥ #${dialog.id}`, `dialog-${dialog.id}`));
    }

    await this.bot.bot.sendMessage(+user.chatId, `üí°–≠—Ç–æ –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏!\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª—é–±–æ–º—É –∏–∑ –Ω–∏—Ö –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!`, {
      reply_markup: {
        inline_keyboard: [
          ...result,
          Btn('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏', 'delete-featured-dialogs'),
          Btn('–≠–∫—Å–ø–æ—Ä—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤', 'export-featured-dialogs'),
        ]
      }
    });
  }

  private async allDialogs(user: User) {
    const allDialogs = user.dialogs.filter((dialog) => !dialog.featured);
    if (allDialogs.length === 0) return await this.bot.bot.sendMessage(+user.chatId, `–£ –í–∞—Å –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤`);
    let result: InlineKeyboardButton[][] = [];

    for (const dialog of allDialogs) {
      result.push(Btn(dialog.firstMessage || `–î–∏–∞–ª–æ–≥ #${dialog.id}`, `dialog-${dialog.id}`));
    }

    await this.bot.bot.sendMessage(+user.chatId, `üí°–≠—Ç–æ –≤–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏!\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª—é–±–æ–º—É –∏–∑ –Ω–∏—Ö –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥!`, {
      reply_markup: {
        inline_keyboard: [
          ...result,
          Btn('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏', 'delete-all-dialogs'),
        ]
      }
    });
  }

  public async createDialog(
    user: User,
    agentId: number,
    resetData: boolean = true,
    welcomeMessage?: string,
  ) {
    if (resetData) {
      await this.dataController.resetData(user);
    }
    const agent = await manager.findOne(AgentModel, {
      where: {
        id: agentId,
      },
    });
    if (!agent) return;
    const dialog = new Dialog();
    dialog.agent = new AgentModel();
    dialog.agent.id = agentId;
    dialog.user = user;
    await manager.save(dialog);
    user.currentDialogId = dialog.id;
    user.agentId = agentId
    user.agent = new AgentModel();
    user.agent.id = agentId;
    user.dialogs.push(dialog);
    await manager.save(user);

    await this.bot.bot.sendMessage(
      +user.chatId,
      welcomeMessage ?? agent.firstMessage,
      {
        reply_markup: {
          inline_keyboard:
            user.currentAudioAgent == null &&
            ![1, 2, 3].includes(user.agentId!) &&
            !user.usingImageGeneration && agent.examplePrompt
              ? [Btn("–í–∑—è—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö", "from-data")]
              : [],
        },
      },
    );
    await this.bot.bot.sendMessage(+user.chatId, "–ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", {
      reply_markup: {
        inline_keyboard: [
          Btn(
            `GPT 4 Omni mini ${user.model === "gpt-4o-mini" ? "‚úÖ" : "‚ùå"}`,
            "model-gpt-4o-mini",
          ),
          Btn(
            `GPT 4 Omni ${user.model === "gpt-4o" ? "‚úÖ" : "‚ùå"}`,
            "model-gpt-4o",
          ),
          Btn(
            `GPT 4 Turbo ${user.model === "gpt-4-turbo" ? "‚úÖ" : "‚ùå"}`,
            "model-gpt-4-turbo",
          ),
        ],
      },
    });

    if (agent.examplePrompt) {
      await this.bot.bot.sendDocument(+user.chatId, Buffer.from(agent.examplePrompt), {
        caption: '–ü—Ä–∏–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞ —Å –º–æ–¥–µ–ª—å—é',
      }, {
        contentType: 'text/plain',
        filename: 'example.txt',
      });
    }
  }

  private async deleteDialog(user: User, dialogId: number) {
    const dialog = await manager.findOne(Dialog, {
      where: {
        id: dialogId,
      },
      relations: {
        files: true,
      },
    });

    if (!dialog) return;

    for (const f of dialog.files) {
      await openai.files.del(f.id);
      await manager.remove(f);
    }
    dialog.files = [];
    await manager.remove(dialog);
    await this.bot.bot.sendMessage(+user.chatId, "–î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω");
  }

  private async dialog(user: User, dialogId: number) {
    const dialog = user.dialogs.find((el) => el.id === dialogId)!;
    if (dialog.featured) {
      let lastMsg: string = '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
      let summarized: string = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
      if (dialog.lastMsgId) {
        const sum = await openai.responses.create({
          model: "gpt-4o-mini",
          input: '–∫—Ä–∞—Ç–∫–æ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π –≤–µ—Å—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥',
          previous_response_id: dialog.lastMsgId,
        });
        
        const res = await openai.responses.retrieve(dialog.lastMsgId);
        lastMsg = res.output_text;
        summarized = sum.output_text;
      }

      await this.bot.bot.sendMessage(+user.chatId, `–ò–∑–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ #${dialog.id}:\n\n‚§∑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: (—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –¥–∏–∞–ª–æ–≥—É): ${dialog.msgCount}\n‚§∑ –†–µ–∂–∏–º —á–∞—Ç–∞: ${dialog.agent.group.name} - ${dialog.agent.name}\n‚§∑–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${dialog.createdAt}\n\n–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: ${summarized}\n\n`, {
        reply_markup: {
          inline_keyboard: [
            Btn("–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", `remove-featured-${dialog.id}`),
            Btn("–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥", `delete-dialog-${dialog.id}`),
            Btn("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∏–∞–ª–æ–≥—É", `continue-dialog-${dialog.id}`),
          ],
        }
      });
      


    } else {
      await this.bot.bot.sendMessage(+user.chatId, `–î–∏–∞–ª–æ–≥ #${dialog.id}:\n\n‚§∑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: (—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –¥–∏–∞–ª–æ–≥—É): ${dialog.msgCount}\n‚§∑ –†–µ–∂–∏–º —á–∞—Ç–∞: ${dialog.agent.group.name} - ${dialog.agent.name}\n‚§∑–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${dialog.createdAt}\n\n`, {
        reply_markup: {
          inline_keyboard: [
            Btn("–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥", `delete-dialog-${dialog.id}`),
            Btn("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∏–∞–ª–æ–≥—É", `continue-dialog-${dialog.id}`),
            Btn("–°–¥–µ–ª–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–º", `make-featured-${dialog.id}`),
          ],
        }
      });
    }

    
  }

  private async removeFeaturedDialog(user: User, dialogId: number) {
    const dialog = await manager.findOne(Dialog, {
      where: {
        id: dialogId,
      },
    });
    if (!dialog) return;
    dialog.featured = false;
    await manager.save(dialog);
    await this.bot.bot.sendMessage(+user.chatId, "–î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", {
      reply_markup: {
        inline_keyboard: [
          Btn("–ù–∞–∑–∞–¥", `dialog-${dialogId}`),
        ]
      }
    });
  }

  private async makeFeaturedDialog(user: User, dialogId: number) {
    const dialog = await manager.findOne(Dialog, {
      where: {
        id: dialogId,
      },
    });
    if (!dialog) return;
    dialog.featured = true;
    await manager.save(dialog);
    await this.bot.bot.sendMessage(+user.chatId, "–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", {
      reply_markup: {
        inline_keyboard: [
          Btn("–ù–∞–∑–∞–¥", `dialog-${dialogId}`),
        ]
      }
    });
  }
  private async deleteFeaturedDialogs(user: User) {
    const featuredDialogs = user.dialogs.filter((dialog) => dialog.featured);
    if (featuredDialogs.length === 0) return await this.bot.bot.sendMessage(+user.chatId, `–£ –í–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤`);
    for (const dialog of featuredDialogs) {
      await this.deleteDialog(user, dialog.id);
    }
    await this.bot.bot.sendMessage(+user.chatId, "–í—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã", {
      reply_markup: {
        inline_keyboard: [
          Btn("–ù–∞–∑–∞–¥", `dialogs`),
        ]
      }
    });
  }
  private async deleteAllDialogs(user: User) {
    for (const dialog of user.dialogs.filter((dialog) => !dialog.featured)) {
      await this.deleteDialog(user, dialog.id);
    }
    await this.bot.bot.sendMessage(+user.chatId, "–í—Å–µ –¥–∏–∞–ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã", {
      reply_markup: {
        inline_keyboard: [
          Btn("–ù–∞–∑–∞–¥", `dialogs`),
        ]
      }
    });
  }

  private async exportFeaturedDialogs(user: User) {
    const featuredDialogs = user.dialogs.filter((dialog) => dialog.featured);
    if (featuredDialogs.length === 0) return await this.bot.bot.sendMessage(+user.chatId, `–£ –í–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤`);
    let result: string = '';
    for (const dialog of featuredDialogs) {
      result += `#${dialog.id}\n\n\n`
      let lastMsgId: string | null = null;
      if (dialog.lastMsgId)  {
        lastMsgId = dialog.lastMsgId;
      }

      while (lastMsgId) {
        const res = await openai.responses.retrieve(lastMsgId);
        const inputItems = await openai.responses.inputItems.list(res.id);
        let currentStr: string = '';
        for (const item of inputItems.data) {
          currentStr += `–í—ã:\n`;
          if (item.type === 'message' && item.role === 'user') {
            for (const c of item.content) {
              if (c.type === 'input_file') {
                currentStr += `–§–∞–π–ª ${c.file_id}\n`;
              } else if (c.type === 'input_text') {
                currentStr += `${c.text}\n`;
              } else if (c.type === 'input_image') {
                currentStr += `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${c.file_id}\n`;
              }
            }
          }

          currentStr +='\n';
        }

        result = currentStr + `${dialog.agent.name}: ${res.output_text}\n` + result;
        lastMsgId = res.previous_response_id ?? null;
      }

      result += `---\n\n\n`;
    }

    await this.bot.bot.sendDocument(+user.chatId, Buffer.from(result), {
      caption: '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏',
    }, {
      contentType: 'text/plain',
      filename: 'featured-dialogs.txt',
    });
    
  }

  private async continueDialog(user: User, dialogId: number) {
    const dialog = user.dialogs.find((el) => el.id === dialogId)!;
    user.currentDialogId = dialog.id;
    user.agentId = dialog.agent.id;
    user.agent = dialog.agent;
    await manager.save(user);

    await this.bot.bot.sendMessage(
      +user.chatId,
      "–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.",
    );

    if (dialog.lastMsgId) {
      const r = await openai.responses.retrieve(dialog.lastMsgId);
      await this.bot.bot.sendMessage(+user.chatId, r.output_text);
    }
  }

  public getUserCurrentDialog(user: User): Dialog {
    console.log(user.dialogs);
    const result = user.dialogs.find((el) => el.id === user.currentDialogId);
    if (!result) throw new Error("Dialog not found");
    return result;
  }

  public async updateDialogLastMsg(dialog: Dialog, msgId: string) {
    dialog.lastMsgId = msgId;
    await manager.save(dialog);
  }
}
