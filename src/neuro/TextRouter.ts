import TelegramBot, {
  InlineKeyboardButton,
  Message,
} from "node-telegram-bot-api";
import { Router } from "./router";
import { bot } from ".";
import { Action } from "../entity/assistants/Action";
import { User } from "../entity/User";
import { Btn } from "./utils";
import { OpenAI } from "./OpenAI";
import { AudioInput } from "./AudioInput";

/**
 * This class is used to route all the text model requests
 * @todo make all the binding code to the events the same
 */
export class TextRouter extends Router {
  /**
   * Creates a new router
   */
  constructor() {
    super();

    bot.on(`document`, async (msg) => {
      console.log(msg);
      const user = await Router.manager.findOne(User, {
        where: {
          chatId: String(msg.chat.id),
        },
        relations: {
        },
      });
      if (!user) return;
      await OpenAI.runDocument(msg, user);
    });
    bot.on("audio", async (msg: Message) => {
      const user = await Router.manager.findOne(User, {
        where: {
          chatId: String(msg.chat.id),
        },
        relations: {
        },
      });
      if (!user) return;
      await OpenAI.runVoice(msg, user, user.usingVoice, true);
    });
    bot.on(`voice`, async (msg) => {
      await this.onVoice(msg);
    });

    this.onQuery = this.onQuery.bind(this);
    this.onText = this.onText.bind(this);
    this.onPhoto = this.onPhoto.bind(this);
    this.onVoice = this.onVoice.bind(this);
  }

  /**
   * Callback on Callback Query
   * @param q Callback Query object
   * @returns Nothing
   */
  public async onQuery(q: TelegramBot.CallbackQuery) {
    const u = await Router.manager.findOne(User, {
      where: {
        chatId: String(q.from.id),
      },
      relations: {
        threads: true,
      },
    });
    if (!u) return;
    if (q.data!.startsWith(`a-`)) {
      const actions = await Router.manager.find(Action, {
        where: {
          assistantId: q.data!.substring(2),
        },
      });
      let result: InlineKeyboardButton[][] = [];
      for (const action of actions) {
        if (action.id !== `asst_5oeIoYRLcSgupyUaPQF8Rp2N`) {
          result.push([
            {
              text: action.name,
              callback_data: `ac-${action.id}`,
            },
          ]);
        }
      }
      result.push([
        {
          text: `–ù–∞–∑–∞–¥`,
          callback_data: `menu-1`,
        },
      ]);
      await bot.sendMessage(q.from.id, `–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é`, {
        reply_markup: {
          inline_keyboard: result,
        },
      });
    }

    if (q.data?.startsWith(`pt-`)) {
      u.dialogueData += `–¢–∏–ø –ø–æ—Å—Ç–∞: ${q.data.substring(3)}\n`;
      await Router.manager.save(u);
      await bot.sendMessage(
        q.from.id,
        `–û—Ç–ª–∏—á–Ω–æ, —Å —Ç–∏–ø–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å`,
        {
          reply_markup: {
            inline_keyboard: [
              Btn(`–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π`, `ps-–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π`),
              Btn(`–î–µ–ª–æ–≤–æ–π`, `ps-–î–µ–ª–æ–≤–æ–π`),
              Btn(`–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π`, `ps-–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π`),
              Btn(`–û–±—É—á–∞—é—â–∏–π`, `ps-–û–±—É—á–∞—é—â–∏–π`),
              Btn(`–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π`, `ps-–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π`),
              Btn(`–ù–∞—É—á–Ω—ã–π`, `ps-–ù–∞—É—á–Ω—ã–π`),
              Btn(`–†–µ–∫–ª–∞–º–Ω—ã–π`, `ps-–†–µ–∫–ª–∞–º–Ω—ã–π`),
              Btn(`–í—ã–∑—ã–≤–∞—é—â–∏–π`, `ps-–í—ã–∑—ã–≤–∞—é—â–∏–π`),
              Btn(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∏–ª–∏`, "styles-confirm"),
              Btn(`–û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª–∏`, "styles-reject"),
              Btn("–ù–∞–∑–∞–¥", "to-type"),
            ],
          },
        },
      );
    }

    if (q.data?.startsWith(`ps-`)) {
      if (u.dialogueData.includes(q.data.substring(3))) {
        const split = u.dialogueData.split("\n");
        const filtered = split.filter(
          (el) => !el.includes(q.data!.substring(3)),
        );
        u.dialogueData = filtered.join("\n");
      } else {
        u.dialogueData += `–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: ${q.data.substring(3)}\n`;
      }
      await Router.manager.save(u);
      await bot.sendMessage(
        q.from.id,
        `–û—Ç–ª–∏—á–Ω–æ, —Å —Ç–∏–ø–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å`,
        {
          reply_markup: {
            inline_keyboard: [
              Btn(
                `–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π\n`) ? "‚úÖ" : ""}`,
                `ps-–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π`,
              ),
              Btn(
                `–î–µ–ª–æ–≤–æ–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –î–µ–ª–æ–≤–æ–π\n`) ? "‚úÖ" : ""}`,
                `ps-–î–µ–ª–æ–≤–æ–π`,
              ),
              Btn(
                `–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π\n`) ? "‚úÖ" : ""}`,
                `ps-–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π`,
              ),
              Btn(
                `–û–±—É—á–∞—é—â–∏–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –û–±—É—á–∞—é—â–∏–π\n`) ? "‚úÖ" : ""}`,
                `ps-–û–±—É—á–∞—é—â–∏–π`,
              ),
              Btn(
                `–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π\n`) ? "‚úÖ" : ""}`,
                `ps-–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π`,
              ),
              Btn(
                `–ù–∞—É—á–Ω—ã–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –ù–∞—É—á–Ω—ã–π\n`) ? "‚úÖ" : ""}`,
                `ps-–ù–∞—É—á–Ω—ã–π`,
              ),
              Btn(
                `–†–µ–∫–ª–∞–º–Ω—ã–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –†–µ–∫–ª–∞–º–Ω—ã–π\n`) ? "‚úÖ" : ""}`,
                `ps-–†–µ–∫–ª–∞–º–Ω—ã–π`,
              ),
              Btn(
                `–í—ã–∑—ã–≤–∞—é—â–∏–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –í—ã–∑—ã–≤–∞—é—â–∏–π\n`) ? "‚úÖ" : ""}`,
                `ps-–í—ã–∑—ã–≤–∞—é—â–∏–π`,
              ),
              Btn(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∏–ª–∏`, "styles-confirm"),
              Btn(`–û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª–∏`, "styles-reject"),
              Btn("–ù–∞–∑–∞–¥", "to-type"),
            ],
          },
        },
      );
      // await OpenAI.createThread(q, u, `asst_J3MtW6o63CAOy6OGjDEUUWu2`);
    }

    if (q.data === "styles-confirm") {
      await OpenAI.createThread(q, u, `asst_J3MtW6o63CAOy6OGjDEUUWu2`);
    }

    if (q.data === "styles-reject") {
      const split = u.dialogueData.split("\n");
      const filtered = split.filter((el) => !el.includes("–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞:"));
      u.dialogueData = filtered.join("\n");
      await Router.manager.save(u);
      await bot.sendMessage(
        q.from.id,
        `–û—Ç–ª–∏—á–Ω–æ, —Å —Ç–∏–ø–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å`,
        {
          reply_markup: {
            inline_keyboard: [
              Btn(
                `–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π\n`) ? "‚úÖ" : ""}`,
                `ps-–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π`,
              ),
              Btn(
                `–î–µ–ª–æ–≤–æ–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –î–µ–ª–æ–≤–æ–π\n`) ? "‚úÖ" : ""}`,
                `ps-–î–µ–ª–æ–≤–æ–π`,
              ),
              Btn(
                `–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π\n`) ? "‚úÖ" : ""}`,
                `ps-–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π`,
              ),
              Btn(
                `–û–±—É—á–∞—é—â–∏–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –û–±—É—á–∞—é—â–∏–π\n`) ? "‚úÖ" : ""}`,
                `ps-–û–±—É—á–∞—é—â–∏–π`,
              ),
              Btn(
                `–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π\n`) ? "‚úÖ" : ""}`,
                `ps-–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π`,
              ),
              Btn(
                `–ù–∞—É—á–Ω—ã–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –ù–∞—É—á–Ω—ã–π\n`) ? "‚úÖ" : ""}`,
                `ps-–ù–∞—É—á–Ω—ã–π`,
              ),
              Btn(
                `–†–µ–∫–ª–∞–º–Ω—ã–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –†–µ–∫–ª–∞–º–Ω—ã–π\n`) ? "‚úÖ" : ""}`,
                `ps-–†–µ–∫–ª–∞–º–Ω—ã–π`,
              ),
              Btn(
                `–í—ã–∑—ã–≤–∞—é—â–∏–π ${u.dialogueData.includes(`–°—Ç–∏–ª—å –ø–æ—Å—Ç–∞: –í—ã–∑—ã–≤–∞—é—â–∏–π\n`) ? "‚úÖ" : ""}`,
                `ps-–í—ã–∑—ã–≤–∞—é—â–∏–π`,
              ),
              Btn(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∏–ª–∏`, "styles-confirm"),
              Btn(`–û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª–∏`, "styles-reject"),
              Btn("–ù–∞–∑–∞–¥", "to-type"),
            ],
          },
        },
      );
    }

    if (q.data === "to-type") {
      u.dialogueData = "";
      await Router.manager.save(u);
      await bot.sendMessage(
        q.from.id,
        `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!üëã –Ø AI —Å–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ—Å—Ç–æ–≤. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ—Å—Ç–æ–≤.\n–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç, –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–∏–ø–æ–º, –∞ –ø–æ—Ç–æ–º —Å–æ —Å—Ç–∏–ª–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –≤—ã–±–∏—Ä–∞–π –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá\n\n–ù–µ –∑–Ω–∞–µ—à—å –∫–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å? –°–º–æ—Ç—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç: https://docs.google.com/document/d/1Eh5FZzDEh6_ErGL1BHk0U-_8YxejNrFBPsrOYOB7Fko/edit`,
        {
          reply_markup: {
            inline_keyboard: [
              Btn(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π`, `pt-–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π`),
              Btn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π`, `pt-–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π`),
              Btn(`–ü–æ–ª–µ–∑–Ω—ã–π`, `pt-–ü–æ–ª–µ–∑–Ω—ã–π`),
            ],
          },
        },
      );
      return;
    }

    if (q.data?.startsWith(`ac-`)) {
      console.log(`Action`);
      if (q.data!.endsWith(`-asst_1BdIGF3mp94XvVfgS88fLIor`)) {
        const asst = await Router.manager.findOneBy(Action, {
          id: q.data!.substring(3),
        });
        if (!asst) return;
        await bot.sendMessage(q.from!.id, asst.welcomeMessage, {
          reply_markup: {
            inline_keyboard: [
              Btn(`–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π`, `style-official`),
              Btn(`–ù–∞—É—á–Ω—ã–π`, `style-scientific`),
              Btn(`–ü—É–±–ª–∏—Ü–∏—Å—Ç–∏—á–µ—Å–∫–∏–π`, `style-public`),
              Btn(`–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π`, `style-fiction`),
              Btn(`–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π`, `style-informal`),
              Btn(`–†–µ–∫–ª–∞–º–Ω—ã–π`, `style-ad`),
            ],
          },
        });
        return;
      }
      if (q.data!.endsWith(`-asst_14B08GDgJphVClkmmtQYo0aq`)) {
        await bot.sendMessage(q.from!.id, `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ—Ñ—Ñ–µ—Ä–∞`, {
          reply_markup: {
            inline_keyboard: [
              Btn(`–ë–æ–ª—å—à–æ–π (120-150 —Å–ª–æ–≤)`, `offer-–±–æ–ª—å—à–æ–π (70-90 —Å–ª–æ–≤)`),
              Btn(`–°—Ä–µ–¥–Ω–∏–π (90-120 —Å–ª–æ–≤)`, `offer-c—Ä–µ–¥–Ω–∏–π (90-120 —Å–ª–æ–≤)`),
              Btn(`–ú–∞–ª–µ–Ω—å–∫–∏–π (60-90 —Å–ª–æ–≤)`, `offer-–º–∞–ª–µ–Ω—å–∫–∏–π (60-90 —Å–ª–æ–≤)`),
            ],
          },
        });
        return;
      }

      if (q.data!.endsWith(`-asst_J3MtW6o63CAOy6OGjDEUUWu2`)) {
        await bot.sendMessage(
          q.from.id,
          `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!üëã –Ø AI —Å–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ—Å—Ç–æ–≤. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ—Å—Ç–æ–≤.\n–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç, –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–∏–ø–æ–º, –∞ –ø–æ—Ç–æ–º —Å–æ —Å—Ç–∏–ª–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –≤—ã–±–∏—Ä–∞–π –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µüëá\n\n–ù–µ –∑–Ω–∞–µ—à—å –∫–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å? –°–º–æ—Ç—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç: https://docs.google.com/document/d/1Eh5FZzDEh6_ErGL1BHk0U-_8YxejNrFBPsrOYOB7Fko/edit`,
          {
            reply_markup: {
              inline_keyboard: [
                Btn(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π`, `pt-–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π`),
                Btn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π`, `pt-–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π`),
                Btn(`–ü–æ–ª–µ–∑–Ω—ã–π`, `pt-–ü–æ–ª–µ–∑–Ω—ã–π`),
              ],
            },
          },
        );
        return;
      }

      if (q.data!.endsWith(`-voice`)) {
        await bot.sendMessage(
          q.from!.id,
          `–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç`,
        );
        u.usingVoice = true;
        await Router.manager.save(u);
        return;
      }

      await OpenAI.createThread(q, u, q.data!.substring(3));
    }

    if (q.data?.startsWith(`transcribe-`)) {
      const id = q.data?.substring(11);
      const f = new AudioInput(id);
      const result = await f.transcribe(u);
      if (u.usingVoice) {
        const data = await OpenAI.setupRunCQ(q, u);
        if (!data) return;
        await OpenAI.run(q, u, data, {
          content: result,
          role: `user`,
        });
      } else {
        await bot.sendMessage(q.from.id, result);
      }
    }

    if (q.data?.startsWith(`offer-`)) {
      u.dialogueData += `–†–∞–∑–º–µ—Ä –æ—Ñ—Ñ–µ—Ä–∞: ${q.data.substring(6)}\n`;
      await Router.manager.save(u);
      await bot.sendMessage(
        q.from!.id,
        `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –º–æ–¥–µ–ª—å—é!\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üëá\n–ù–µ –∑–Ω–∞–µ—à—å –∫–∞–∫—É—é –≤—ã–±—Ä–∞—Ç—å? –°–º–æ—Ç—Ä–∏ [—Å–ø—Ä–∞–≤–∫—É](https://docs.google.com/document/d/1785aqFyeHDYV3QjfJwpA4TC-K1UjScqRRDsQoFk7Uy8/edit)`,
        {
          reply_markup: {
            inline_keyboard: [
              Btn(`AIDA`, `ot-AIDA`),
              Btn(`PAS`, `ot-PAS`),
              Btn(`FAB`, `ot-FAB`),
              Btn(`4Ps`, `ot-4PS`),
              Btn(`Quest`, `ot-QUEST`),
              Btn(`ACC`, `ot-ACC`),
              Btn(`–°–º–µ—à–∞–Ω–Ω–∞—è`, `ot-—Å–º–µ—à–∞–Ω–Ω–∞—è`),
            ],
          },
          parse_mode: "Markdown",
        },
      );
    }

    if (q.data?.startsWith(`ot-`)) {
      // offer type
      u.dialogueData += `–ú–æ–¥–µ–ª—å –æ—Ñ—Ñ–µ—Ä–∞: ${q.data.substring(4)}\n`;
      await Router.manager.save(u);
      await OpenAI.createThread(q, u, `asst_14B08GDgJphVClkmmtQYo0aq`);
    }

    if (q.data?.startsWith(`style-`)) {
      u.dialogueData += `–°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞: ${q.data.substring(6)}\n`;
      await Router.manager.save(u);
      await bot.sendMessage(
        q.from.id,
        `${u.dialogueData}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω —Ç–µ–∫—Å—Ç–∞`,
        {
          reply_markup: {
            inline_keyboard: [
              Btn(`–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π`, `tone-–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π`),
              Btn(`–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π`, `tone-–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π`),
              Btn(`–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π`, `tone-–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π`),
              Btn(`–ò—Ä–æ–Ω–∏—á–Ω—ã–π`, `tone-–ò—Ä–æ–Ω–∏—á–Ω—ã–π`),
              Btn(`–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π`, `tone-–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π`),
              Btn(`–í–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–π`, `tone-–í–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–π`),
              Btn(`–î–µ—Ä–∑–∫–∏–π`, `tone-–î–µ—Ä–∑–∫–∏–π`),
              Btn(`–°–ø–æ–∫–æ–π–Ω—ã–π / —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π`, `tone-–°–ø–æ–∫–æ–π–Ω—ã–π`),
              Btn(`–ù–∞–∑–∞–¥`, `ac-asst_1BdIGF3mp94XvVfgS88fLIor`),
            ],
          },
        },
      );
    }

    if (q.data?.startsWith(`tone-`)) {
      u.dialogueData += `–¢–æ–Ω —Ç–µ–∫—Å—Ç–∞: ${q.data.substring(5)}\n`;
      await OpenAI.createThread(q, u, `asst_1BdIGF3mp94XvVfgS88fLIor`);
    }
  }

  /**
   * Callback to process text messages
   * @param msg Message object
   * @returns Nothing
   */
  public async onText(msg: TelegramBot.Message) {
    const user = await Router.manager.findOne(User, {
      where: {
        chatId: String(msg.chat.id),
      },
      relations: {
      },
    });
    if (!user) return;
    await OpenAI.runText(msg, user);
  }

  /**
   * Callback to process photos
   * @param msg Message Object
   * @returns Nothing
   */
  public async onPhoto(msg: Message) {
    const user = await Router.manager.findOne(User, {
      where: {
        chatId: String(msg.chat.id),
      },
      relations: {
      },
    });
    if (!user) return;
    await OpenAI.runPhoto(msg, user);
  }

  /**
   * Callback to process Voice Messages
   * @param msg Message Object
   * @returns Nothing
   */
  public async onVoice(msg: Message) {
    const user = await Router.manager.findOne(User, {
      where: {
        chatId: String(msg.from!.id),
      },
      relations: {
      },
    });
    if (!user) return;
    if (user.usingVoice) {
      await OpenAI.runVoice(msg, user, false);
      return;
    }
    await OpenAI.runVoice(msg, user, true);
  }
}
