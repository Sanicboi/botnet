import TelegramBot, { InlineKeyboardButton } from "node-telegram-bot-api";
import { AppDataSource } from "../data-source";
import { User } from "../entity/User";
import OpenAI from "openai";
import pino from "pino";
import { Router } from "./router";
import { MenuRouter } from "./MenuRouter";
import { SettingsRouter } from "./SettingsRouter";
import { TextRouter } from "./TextRouter";
import { ImagesRouter } from "./ImagesRouter";
import { PaymentsRouter } from "./PaymentsRouter";
import { PromoCode } from "../entity/assistants/Promo";
import { UserPromo } from "../entity/assistants/UserPromo";
const logger = pino();

export const bot = new TelegramBot(process.env.NEURO_TOKEN ?? "", {
  polling: true,
});

export const openai = new OpenAI({
  apiKey: process.env.OPENAI_KEY ?? "",
});

AppDataSource.initialize();

const manager = AppDataSource.manager;


bot.setMyCommands([
  {
    command: "about",
    description: "ü§ù–û –Ω–∞—Å (SmartComrade)",
  },
  {
    command: "help",
    description: "ü§ñ–û –±–æ—Ç–µ (—Å–ø—Ä–∞–≤–∫–∞)",
  },
  {
    command: "neuro",
    description: "üß†–ù–µ–π—Ä–æ-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏",
  },
  {
    command: "balance",
    description: "üí≥–ë–∞–ª–∞–Ω—Å & –ø–æ–¥–ø–∏—Å–∫–∞",
  },
  {
    command: "ref",
    description: "üèÖ–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
  },
  {
    command: "free",
    description: "üéÅ–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã",
  },
  {
    command: "deletecontext",
    description: "üîÅ–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
  },
  {
    command: "settings",
    description: "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
  },
  {
    command: "terms",
    description: "üìú–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è & –ø–æ–ª–∏—Ç–∏–∫–∞",
  },
]);

const menuRouter = new MenuRouter();
const settingsRouter = new SettingsRouter();
const textRouter = new TextRouter();
const imagesRouter = new ImagesRouter();
const paymentsRouter = new PaymentsRouter();

bot.on("callback_query", async (q) => {
  try {
    await Router.tryDeletePrevious(
      q.message!.message_id + 1,
      q.message!.chat.id,
    );
    const user = await manager.findOne(User, {
      where: {
        chatId: String(q.from.id),
      },
      relations: {
        action: {
          threads: true,
        },
      },
    });
    if (!user) return;
    const reset = await imagesRouter.onQuery(q, user);
    if (reset) {
      await Router.resetWaiters(user, false);
    }
    await Router.resetSub(user);
    await textRouter.onQuery(q);
    await paymentsRouter.onQuery(q);

    await menuRouter.onCallback(q);
    await settingsRouter.onCallback(q);
  } catch (err) {
    logger.fatal(err);
  }
});

bot.onText(/./, async (msg) => {
  try {
    if (!msg.text!.startsWith("/")) {
      const u = await manager.findOne(User, {
        where: {
          chatId: String(msg.from!.id),
        },
        relations: {
          action: true,
          threads: true,
        },
      });
      if (!u) return;
      if (u.waitingForPromo) {
        u.waitingForPromo = false;
        const promo = await manager.findOne(PromoCode, {
          where: {
            name: u.name
          },
          relations: {
            userPromos: true
          }
        });
        
        if (!promo) {
          await bot.sendMessage(msg.from!.id, "–£–ø—Å, –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω(")
        } else {
          if (promo.expiresAt < new Date()) {
            await bot.sendMessage(msg.from!.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏(. –î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å—Ç–µ–∫.");
          } else if (promo.limit <= promo.userPromos.length) {
            await bot.sendMessage(msg.from!.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏(. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥, –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç.");
          } else if (promo.userPromos.findIndex(el => el.userId === String(msg.from!.id))) {
            await bot.sendMessage(msg.from!.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ –≤–≤–µ–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
          } else {
            const uPromo = new UserPromo()
            uPromo.promoId = promo.name;
            uPromo.promo = promo;
            uPromo.userId = u.chatId;
            uPromo.user = u;
            await manager.save(uPromo);
            u.addBalance += promo.amount;
            
          }
        }

        await manager.save(u);
        return;
      }

      const imRes = await imagesRouter.onText(msg, u);
      if (imRes) return;
      const nameRes = await settingsRouter.onText(msg, u);
      if (nameRes) return;
      await textRouter.onText(msg);
    }
  } catch (err) {
    logger.fatal(err);
  }
});

bot.on("photo", async (msg) => {
  await textRouter.onPhoto(msg);
});

bot.onText(/\/free/, async (msg) => {
  await bot.sendMessage(
    msg.from!.id,
    `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${msg.from?.first_name}! 

–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã SmartComrade üéÅ

–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –Ω–∞–ø–∏—à–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. 

‚ùóÔ∏è–í–∞–∂–Ω–æ: –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç 7000 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!`,
  );
});
