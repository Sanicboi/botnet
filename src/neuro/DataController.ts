import { AppDataSource } from "../data-source";
import { User, UserDataType, UserDataTypeMapped } from "../entity/User";
import { Btn } from "./utils";
import { Bot } from "./Bot";
import { wait } from "../utils/wait";

const map = new Map<UserDataType, string>();
map.set(
  "main",
  "–ó–∞–ø–æ–ª–Ω–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ —è –∏—Ö –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é:\n1)–ò–º—è –§–∞–º–∏–ª–∏—è\n2)–ü–æ–ª\n3)–ì–æ—Ä–æ–¥ (–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è)\n4)–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å / –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n–û—Ç–≤–µ—Ç –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ä–∞—Å–ø–∏—Å–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—É–Ω–∫—Ç–∞–º!\n–û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç–∞!üòâ",
);
map.set(
  "career",
  "–ó–∞–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–±–æ—Ç–µ –∏ –∫–∞—Ä—å–µ—Ä–µ, –∞ —è –∏—Ö –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é:\n–¢–µ–∫—É—â–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è / —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:\n–ö–æ–º–ø–∞–Ω–∏—è / –ø—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å):\n–î–æ–ª–∂–Ω–æ—Å—Ç—å / —Ä–æ–ª—å:\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–≥–¥–µ, –∫–µ–º, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç):\n–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç / –∫—É—Ä—Å—ã / —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã):\n–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏?\n–û—Ç–≤–µ—Ç –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ä–∞—Å–ø–∏—Å–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—É–Ω–∫—Ç–∞–º!\n–û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç–∞!üòâ",
);
map.set(
  "personal",
  "–ó–∞–ø–æ–ª–Ω–∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ —è –∏—Ö –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é:\n1)–¢–≤–æ—è –ø—Å–∏—Ö–æ—Ç–∏–ø (–•–æ–ª–µ—Ä–∏–∫; –§–ª–µ–≥–º–∞—Ç–∏–∫; –°–∞–Ω–≥–≤–∏–Ω–∏–∫; –ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫)\n2)–¢–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏\n3)–õ—é–±–∏–º—ã–µ –∑–∞–Ω—è—Ç–∏—è / —Ö–æ–±–±–∏:\n4)–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π / –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π):\n5)–ö–∞–∫ —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è (–∏–Ω—Ç—É–∏—Ü–∏—è / –∞–Ω–∞–ª–∏–∑ / –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã):\n–û—Ç–≤–µ—Ç –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ä–∞—Å–ø–∏—Å–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—É–Ω–∫—Ç–∞–º!\n–û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç–∞!üòâ",
);
map.set(
  "business",
  `
–ó–∞–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–µ –æ –±–∏–∑–Ω–µ—Å–µ, –∞ —è –∏—Ö –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é: 
1. –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:
1.1 –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.
1.2 –û—Ç—Ä–∞—Å–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è.
1.3 –û—Å–Ω–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏.
2. –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞:
2.1 –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–∏–∑–Ω–µ—Å.
2.2 –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥.
2.3 –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—è –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.
2.4 –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å—Ç–∞–¥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ä–æ—Å—Ç–∞, –∑—Ä–µ–ª–æ—Å—Ç–∏ –∏–ª–∏ —Å–ø–∞–¥–∞).
3. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –±–∏–∑–Ω–µ—Å–∞:
–û—Å–Ω–æ–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–≥–æ—Ä–æ–¥–∞, —Ä–µ–≥–∏–æ–Ω—ã, —Å—Ç—Ä–∞–Ω—ã).
4. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:
4.1 –ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º? (–≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Å–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è).
4.2 –í–∞–∂–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –±–∏–∑–Ω–µ—Å.
5.–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–ü–æ –∂–µ–ª–∞–Ω–∏—é):
5.1 –î–æ—Ö–æ–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏
5.2 –ñ–µ–ª–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞ 
6. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:
6.1 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ).
6.2 –ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏—è –∏–º–µ–µ—Ç –ø–µ—Ä–µ–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏?
7.SWOT –∞–Ω–∞–ª–∏–∑ (–ø–æ –∂–µ–ª–∞–Ω–∏—é): 
7.1 –£–≥—Ä–æ–∑—ã 
7.2 –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ 
7.3 –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏ 
7.4 –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏ 

–û—Ç–≤–µ—Ç –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ä–∞—Å–ø–∏—Å–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—É–Ω–∫—Ç–∞–º! 
–û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç–∞!üòâ
`,
);

const manager = AppDataSource.manager;

export class DataController {
  constructor(private bot: Bot) {
    this.bot.onMyData(this.myData.bind(this));
    this.bot.onDataCategory(this.dataCategory.bind(this));
    this.bot.onData(this.data.bind(this));
    this.bot.onTakeFromData(this.takeFromData.bind(this));
    this.bot.onChangeData(this.changeData.bind(this));
    this.bot.onLeaveData(this.leaveData.bind(this));
  }

  private async myData(user: User) {
    await this.bot.bot.sendMessage(
      +user.chatId,
      "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ, —Ç–µ–º —Å–∞–º—ã–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –±—É–¥—É—Ç –∑–∞—Ä–∞–Ω–µ–µ –æ–±–ª–∞–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.¬†\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å",
      {
        reply_markup: {
          inline_keyboard: [
            Btn("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "data-main"),
            Btn("–õ–∏—á–Ω–æ—Å—Ç—å –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", "data-personal"),
            Btn("–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞", "data-career"),
            Btn("–ë–∏–∑–Ω–µ—Å", "data-business"),
          ],
        },
      },
    );
  }

  private async dataCategory(user: User, category: string) {
    const cat = category as UserDataType;
    const mapped = cat + "Data" as UserDataTypeMapped;

    if (user[mapped]) {
      await this.bot.bot.sendMessage(+user.chatId, map.get(cat)!);
      await wait(0.25);
      await this.bot.bot.sendMessage(
        +user.chatId,
        `–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n ${user[mapped]}`,
        {
          reply_markup: {
            inline_keyboard: [
              Btn("–ò–∑–º–µ–Ω–∏—Ç—å", "change-" + cat),
              Btn("–û—Å—Ç–∞–≤–∏—Ç—å", "leave"),
            ],
          },
        },
      );
    } else {
      user.waitingForData = cat;
    await manager.save(user);
    await this.bot.bot.sendMessage(+user.chatId, map.get(cat)! + "\n\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.");
    }
  }

  private async data(user: User, text: string) {
    const key: UserDataTypeMapped = (user.waitingForData +
      "Data") as UserDataTypeMapped;
    user[key] = text;
    user.waitingForData = "";
    await manager.save(user);
    await this.bot.bot.sendMessage(+user.chatId, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
  }

  public async resetData(user: User) {
    user.dialogueData = "";
    user.waitingForData = "";
    user.waitingForPromo = false;

    user.agentId = null;
    user.agent = null;
    user.currentDialogId = null;
    user.currentAudioAgent = null;
    user.usingImageGeneration = false;



    await manager.save(user);

    for (const d of user.dialogs) {
      if (!d.firstMessage) {
        await manager.remove(d);
      }
    }
  }

  private async takeFromData(user: User) {
    user.dialogueData = user.mainData + '\n' + user.careerData + '\n' + user.personalData + '\n' + user.businessData + '\n';
    await manager.save(user);
    await this.bot.bot.sendMessage(+user.chatId, '–î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!');
  }

  private async changeData(user: User, category: string) {
    user.waitingForData = category as UserDataType;
    await manager.save(user);
    await this.bot.bot.sendMessage(
      +user.chatId,
      map.get(category as UserDataType)! + "\n\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
    );
  }

  private async leaveData(user: User) {
    await this.bot.bot.sendMessage(user.chatId, "–î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã");;
  }
}
