import TelegramBot, { InlineKeyboardButton, Message } from "node-telegram-bot-api";
import { MessageFormatter } from "../utils/MessageFormatter";
import pino from "pino";
import { AppDataSource } from "../data-source";
import { Client } from "../entity/Client";

const logger = pino();
const bot = new TelegramBot(process.env.SMARTCOMRADE_TOKEN ?? "", {
  polling: true,
});

AppDataSource.initialize();

bot
  .setMyCommands([
    {
      description: "–ë–æ–ª—å—à–µ –æ –Ω–∞—Å (SmartComrade)",
      command: "about",
    },
    {
      description: "–ì–æ—Ç–æ–≤—ã–µ AI —Ä–µ—à–µ–Ω–∏—è",
      command: "products",
    },
    {
      description: "–ù–µ–π—Ä–æ-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏",
      command: "aiproducts"
    },
    {
      description: "–ù–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏",
      command: "social",
    },
    {
      description: "–ü–æ–¥–∞—Ä–∫–∏ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
      command: "presents",
    },
    {
      description: "–ó–∞–ø–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é",
      command: "session",
    },
    {
      description: "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
      command: "partnership",
    },
    {
      description: "–î–æ—Å—Ç—É–ø –∫ GPT",
      command: "gpt",
    },
    {
      description: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
      command: "support",
    },
  ])
  .catch((err) => console.log(err));

bot.onText(/\/start/, async (msg) => {
  if (!msg.from) return;
  let user = await AppDataSource.getRepository(Client).findOneBy({
    chatId: String(msg.from!.id),
  });
  if (!user) {
    const user = new Client();
    user.chatId = String(msg.from!.id);
    await AppDataSource.getRepository(Client).save(user);
  }
  await bot.sendMessage(
    msg.from.id,
    `–ü—Ä–∏–≤–µ—Ç, ${msg.from.username ?? msg.from.first_name}`,
  );
  await MessageFormatter.sendImageFromFileBot('chris.jpg', bot, msg.from!.id, `–ú–µ–Ω—è –∑–æ–≤—É—Ç –ö—Ä–∏—Å.üöÄ\n–Ø AI –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ SmartComarde.\n–Ø –±—É–¥—É –í–∞—à–∏–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º –≤ –º–∏—Ä AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–πüß¨\n\n–ö–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∞:  –í–Ω–µ–¥—Ä–µ–Ω–∏–µ AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –±–∏–∑–Ω–µ—Å, —Å–ø–æ—Å–æ–±–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 40%.\n\n–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é –Ω–∏–∂–µ))\n\nP.S. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–±—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã —É–∂–µ —Å–µ–π—á–∞—Å üéÅ`);
});

bot.onText(/\/about/, async (msg) => {
  await MessageFormatter.sendTextFromFileBot(bot, "about.txt", msg.from!.id);
});

bot.onText(/\/products/, async (msg) => {
  try {
    await MessageFormatter.sendImageFromFileBot(
      "products.jpg",
      bot,
      msg.from!.id,
      MessageFormatter.readTextFromFile("products.txt"),
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
                callback_data: "leadgen",
              },
            ],
            [
              {
                text: "SMM –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥",
                callback_data: "smm",
              },
            ],
            [
              {
                text: "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã",
                callback_data: "mp",
              },
            ],
            [
              {
                text: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂",
                callback_data: "sales",
              },
            ],
            [
              {
                text: '–°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –Ω–µ–π—Ä–æ-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
                callback_data: 'create'
              }
            ],
            [
                {
                    text: '–î—Ä—É–≥–æ–µ',
                    callback_data: 'other'
                }
            ],

          ],
        },
      },
    );
  } catch (error) {
    logger.fatal(error);
  }
});

bot.on("callback_query", async (q) => {
  let caption = "";

  switch (q.data) {
    case "mp":   
    case "create":
    case "leadgen":
    case "sales":
    case "smm":  
    case "call":
    case "attorney":
    case "programmes":
    case "copywriting":
    case "session":
    case "other":
    case "question":
      await MessageFormatter.sendTextFromFileBot(bot, q.data + ".txt", q.from.id, q.data == 'other' ? {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã',
                callback_data: 'question'
              }
            ]
          ]
        }
      } : undefined);
      if (q.data == 'question') {
        const user = await AppDataSource.getRepository(Client).findOneBy({
          chatId: String(q.from.id)
        });
        if (user) {
          user.qt = 'a';
          await AppDataSource.getRepository(Client).save(user);
        }
      }
      return;
    
    case "check":
      try {
        // const u = await bot.getChatMember(+(process.env.PROMO ?? ''), q.from.id);
        // if (!u) throw new Error();
        await MessageFormatter.sendTextFromFileBot(bot, "check.txt", q.from.id);
      } catch (error) {
        await bot.sendMessage(
          q.from.id,
          "–ù–µ –≤–∏–∂—É —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã!)",
        );
      }
  }
  await MessageFormatter.sendImageFromFileBot(
    "products.jpg",
    bot,
    q.from.id,
    MessageFormatter.readTextFromFile(caption),
    {
      reply_markup:
        q.data === "leadgen"
          ? {
              inline_keyboard: [
                [
                  {
                    text: "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–≤–æ–Ω–æ–∫",
                    callback_data: "call",
                  },
                ],
              ],
            }
          : undefined,
    },
  );
});


bot.onText(/\/social/, async (msg) => {
  await MessageFormatter.sendTextFromFileBot(bot, "social.txt", msg.from!.id);
});

bot.onText(/\/presents/, async (msg) => {
  await MessageFormatter.sendTextFromFileBot(
    bot,
    "presents.txt",
    msg.from!.id,
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ö–∞–Ω–∞–ª",
              url: "https://google.com",
            },
          ],
          [
            {
              text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
              callback_data: "check",
            },
          ],
        ],
      },
    },
  );
});

bot.onText(/\/gpt/, async (msg) => {
  await MessageFormatter.sendTextFromFileBot(bot, "gpt.txt", msg.from!.id);
});

bot.onText(/\/support/, async (msg) => {
  await MessageFormatter.sendTextFromFileBot(bot, "support.txt", msg.from!.id);
});

bot.onText(/\/partnership/, async (msg) => {
  await MessageFormatter.sendTextFromFileBot(
    bot,
    "partnership.txt",
    msg.from!.id,
  );
});

bot.onText(/./, async (msg) => {
  if (!msg.text!.startsWith("/")) {
    const user = await AppDataSource.getRepository(Client).findOneBy({
      chatId: String(msg.from!.id),
    });
    if (user) {
      const map1 = new Map<
        "s" | "l" | "d" | "a" | "o" | "n",
        Exclude<keyof Client, "chatId" | "qt">
      >();
      const map2 = new Map<"s" | "l" | "d" | "a" | "o" | "n", string>();
      const map3 = new Map<
        "s" | "l" | "d" | "a" | "o" | "n",
        "s" | "l" | "d" | "a" | "o" | "n"
      >();
      map1.set("s", "sphere");
      map1.set("l", "leads");
      map1.set("d", "callDate");
      map1.set("a", "sphere");
      map1.set("o", "optimize");
      map2.set(
        "s",
        "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —Å–µ–π—á–∞—Å –æ–±—Å—Ç–æ—è—Ç –¥–µ–ª–∞ —Å –∑–∞—è–≤–∫–∞–º–∏? –°–∫–æ–ª—å–∫–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ?",
      );
      map2.set("l", "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª! –ö–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?");
      map2.set(
        "d",
        "–°—É–ø–µ—Ä, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Å–≤—è–∑–∏. –ù–∞–ø–∏—à–µ–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è))",
      );
      map2.set(
        "a",
        "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫—É—é —Å—Ñ–µ—Ä—É –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–π—Ä–æ-—Å–µ—Ç–µ–π?",
      );
      map2.set("o", "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª! –ö–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?");
      map3.set("s", "l");
      map3.set("l", "d");
      map3.set("a", "o");
      map3.set("o", "d");
      map3.set("d", "n");

      if (map1.has(user.qt)) {
        const idx = map1.get(user.qt);
        user[idx!] = msg.text!;
        await bot.sendMessage(msg.from!.id, map2.get(user.qt)!);
        user.qt = map3.get(user.qt)!;
        await AppDataSource.getRepository(Client).save(user);
      }
    }
  }
});


bot.onText(/\/aiproducts/, async (msg: Message) => {
  // await bot.sendMessage(msg.from!.id, '–ß—Ç–æ–±—ã –º–Ω–µ –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', {
  //   reply_markup: {
  //     inline_keyboard: [
  //       [
  //         {
  //           text: '–Æ—Ä —É—Å–ª—É–≥–∏',
  //           callback_data: 'attorney'
  //         }
  //       ],
  //       [
  //         {
  //           text: '–ö—É—Ä–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω –ø—Ä–æ–≥—Ä–∞–º–º',
  //           callback_data: 'programmes'
  //         }
  //       ],
  //       [
  //         {
  //           text: '–ö–æ–ø–∏—Ä–∞–π—Ç–Ω–≥',
  //           callback_data: 'copywriting'
  //         }
  //       ],
  //       [
  //         {
  //           text: '–î—Ä—É–≥–æ–µ',
  //           callback_data: 'other'
  //         }
  //       ]
  //     ]
  //   }
  // });
  await MessageFormatter.sendTextFromFileBot(bot, 'aiproducts.txt', msg.from!.id);
})